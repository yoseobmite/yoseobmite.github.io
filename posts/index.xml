<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Story about learning</title>
        <link>https://yoseobmite.github.io/posts/</link>
        <description>Recent content in Posts on Story about learning</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ko-KR</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Mon, 13 Jul 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://yoseobmite.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>hugbo blog create</title>
            <link>https://yoseobmite.github.io/posts/2020/07/hugbo-blog-create/</link>
            <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/hugbo-blog-create/</guid>
            <description>여름 휴가시작후 ubuntu20.04 를 설치 나름 안정된 데스탑환경을 만족 스럽더군요 다시 정적 블로그 static blog시작 해볼까 하고 __Hugo__를 둘러 봅니다. 윈도우10에서 우분투 환경으로 동작 가능하다기에 도전 해보았습니다.
 개요 - 설치 순서 - [WLS2 설치](#h2-idwls2-설치-1330wls2-설치h2) - [몇가지 기본설정 하기](#몇가지-기본설정-하기) - [zsh과 oh-my-zsh 설치, 그리고 플러그인 적용](#zsh과-oh-my-zsh-설치-그리고-플러그인-적용) - [Hugo 설치](#h3-idhugo-설치-17hugo-설치h3) - [Github deploy](#github-deploy) - [shortcord 및 추가 기능](#shortcord-및-추가-기능)  WLS2 설치  Windows Subsystem for Linux? WSL은 윈도우환경에서 기존의 Virtual Box나 Hyper-V와 같은 가상머신을 이용하지 않고(실질 적으로 가상머신을 이용하기는 하지만.</description>
            <content type="html"><![CDATA[<blockquote>
<p>여름 휴가시작후 <code>ubuntu20.04</code> 를 설치 나름 안정된 데스탑환경을 만족 스럽더군요 다시 정적 블로그 <code>static blog</code>시작 해볼까 하고 __<code>Hugo</code>__를 둘러 봅니다. 윈도우10에서 우분투 환경으로 동작 가능하다기에 도전 해보았습니다.</p>
</blockquote>
<h2 id="개요">개요</h2>
<pre><code>- 설치 순서 
    - [WLS2 설치](#h2-idwls2-설치-1330wls2-설치h2) 
    - [몇가지 기본설정 하기](#몇가지-기본설정-하기)
    - [zsh과 oh-my-zsh 설치, 그리고 플러그인 적용](#zsh과-oh-my-zsh-설치-그리고-플러그인-적용)
    - [Hugo 설치](#h3-idhugo-설치-17hugo-설치h3)
    - [Github deploy](#github-deploy)
    - [shortcord 및 추가 기능](#shortcord-및-추가-기능)
</code></pre>
<h2 id="wls2-설치">WLS2 설치</h2>
<hr>
<p><strong>Windows Subsystem for Linux?</strong>
<code>WSL</code>은 윈도우환경에서 기존의 <code>Virtual Box</code>나 <code>Hyper-V</code>와 같은 가상머신을 이용하지 않고(실질 적으로 가상머신을 이용하기는 하지만..) 리눅스를 이용할 수 있게 해줍니다. 현재 <code>WSL</code>은 1과 2가 나온 상태이며 <code>WSL1</code>는 마이크로소프트 스토어에서 Windows Terminal을 검색하여 설치하여 사용할 수 있습니다. 현재 <code>WSL2</code>는 정식 릴리즈 버전이 아닙니다. 해당 기능을 사용하기 위해서는 윈도우즈 오픈베타와 같이 미리 시스템을 체험해보는 &lsquo;Insider preview&rsquo; 프로그램에 등록하여야 하며 <code>WSL2</code>이외에도 추가적인 설치가 필요합니다. 설치 과정이 수고스럽지만 <code>WSL2</code>를 설치해보고 싶으신분들은 한번쯤 해보셔도 좋을것 같습니다.</p>
<blockquote>
<p>출처 :<a href="https://rldnddl87.github.io/devops/wsl2_setup/">개발자블로그</a>
오호라 윈도우10에서 Hyper-V 설치후 우분투18.04 돌려봤으나 엄청 느려져 지웠던터라 흥미롭더군요.
<a href="https://docs.microsoft.com/ko-kr/windows/wsl/install-win10#install-the-windows-subsystem-for-linux">설치가이드</a></p>
</blockquote>
<p><strong>Linux용 Windows 하위 시스템 설치</strong></p>
<p>Windows에서 Linux 배포를 실행하기 전에 &ldquo;Linux용 Windows 하위 시스템&rdquo; 옵션 기능을 사용해야 합니다.</p>
<p><code>PowerShell</code>을 관리자 권한으로 열어 실행합니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
</code></pre></div><p><code>WSL 1</code>만 설치하려면 지금 머신을 다시 시작하여 선택한 <code>Linux</code> 배포 설치로 이동해야 합니다. 그렇지 않으면 다시 시작될 때까지 기다렸다가 <code>WSL 2</code>로 업데이트로 이동합니다. <code>WSL 2</code>와 <code>WSL 1</code>비교에 대해 자세히 알아보세요.</p>
<p><strong>WSL 2로 업데이트</strong></p>
<p><code>WSL 2</code>로 업데이트하려면 다음 조건을 충족해야 합니다.
<code>Windows 10</code> 실행, 버전 2004로 업데이트, 빌드 19041 이상.
<code>Windows 로고 키</code> + <code>R</code>을 선택하고 <code>winver</code>를 입력한 다음, 확인을 선택하여 <code>Windows 버전</code>을 확인합니다. (또는 <code>Windows 명령 프롬프트</code>에서 <code>ver</code> 명령을 입력합니다.) 빌드가 19041보다 낮은 경우 최신 <code>Windows 버전</code>으로 업데이트합니다. <code>Windows 업데이트</code> 도우미를 가져옵니다.</p>
<p><strong>&lsquo;가상 머신 플랫폼&rsquo; 옵션 구성 요소 사용</strong></p>
<p>WSL 2를 설치하기 전에 &ldquo;가상 머신 플랫폼&rdquo; 옵션 기능을 사용하도록 설정해야 합니다.</p>
<p><code>PowerShell</code>을 관리자 권한으로 열어 실행합니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart
</code></pre></div><p>머신을 다시 시작하여 <code>WSL</code> 설치를 완료하고 WSL 2로 업데이트합니다.</p>
<p><strong>WSL 2를 기본 버전으로 설정</strong></p>
<p>새 <code>Linux</code> 배포를 설치할 때 <code>PowerShell</code>에서 다음 명령을 실행하여 <code>WSL 2</code>를 기본 버전으로 설정합니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">wsl --set-default-version <span style="color:#2aa198">2</span>
</code></pre></div><p><strong>선택한 Linux 배포 설치</strong></p>
<pre><code>[`Microsoft Store`](https://aka.ms/wslstore)를 열고 즐겨 찾는 `Linux` 배포를 선택합니다.
</code></pre>
<ul>
<li><a href="https://www.microsoft.com/store/apps/9n6svws3rx71">Ubuntu 20.04 LTS</a></li>
</ul>
<p><strong>새 배포 설정</strong></p>
<p>새로 설치된 <code>Linux</code> 배포를 처음 시작하면 콘솔 창이 열리고 파일이 압축 해제되어 PC에 저장될 때까지 1~2분 정도 기다려야 합니다. 이후의 모든 시작은 1초도 걸리지 않습니다.
새 <code>Linux</code> 배포에 대한 사용자 계정 및 암호를 만들어야 합니다.
<code>WSL 2</code>를 기본 아키텍처로 설정하려는 경우 이 명령을 사용하여 수행할 수 있습니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">wsl --set-default-version <span style="color:#2aa198">2</span>
</code></pre></div><p>시작 창에서 <code>ubuntu20.04 LTS</code> 를 발견 할수 있습니다.</p>
<h2 id="몇가지-기본설정-하기">몇가지 기본설정 하기</h2>
<hr>
<p>기본 패키지 설치와 전체 업데이트</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">sudo apt update
sudo apt install vim git curl 
sudo apt upgrade -y
sudo apt autoremove -y
</code></pre></div><h2 id="zsh과-oh-my-zsh-설치-그리고-플러그인-적용">zsh과 oh-my-zsh 설치, 그리고 플러그인 적용</h2>
<hr>
<p>데스크탑 환경에서 <code>bash</code> 쉘의 시대는 저물고 있고 바야흐로 <code>zsh</code>의 시대입니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">sudo apt install zsh -y <span style="color:#719e07">&amp;&amp;</span> chsh -s <span style="color:#586e75">`</span>which zsh<span style="color:#586e75">`</span>
<span style="color:#586e75"># chsh 명령어 실행시 password 를 확인합니다.</span>
curl -L https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh | sh
</code></pre></div><p>chsh 명령어로 기본 쉘을 변경해도 로그아웃 후 재 로그인 전까지 Terminal 앱에서는 bash 쉘이 기본으로 나타납니다.</p>
<p><strong>zsh bullet-train 테마</strong></p>
<p>zsh에서는 <code>agnoster</code> 테마가 가장 유명하지만 저는 <code>bullet-train</code> 테마를 사용합니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">wget http://raw.github.com/caiogondim/bullet-train-oh-my-zsh-theme/master/bullet-train.zsh-theme <span style="color:#719e07">&amp;&amp;</span> mkdir <span style="color:#268bd2">$ZSH_CUSTOM</span>/themes <span style="color:#719e07">&amp;&amp;</span> mv bullet-train.zsh-theme <span style="color:#268bd2">$ZSH_CUSTOM</span>/themes/
</code></pre></div><p>위 명령어를 실행 후 <code>~/.zshrc</code> 파일을 열어 <code>ZSH_THEME</code> 값을 <code>bullet-train</code> 으로 바꿔줍니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH"><span style="color:#586e75"># ...</span>
<span style="color:#268bd2">ZSH_THEME</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;bullet-train&#34;</span>
</code></pre></div><p><strong>유용한 플러그인 설치</strong></p>
<p>다양한 기능을 이제부터 익혀보렵니다. ^^!</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">git clone git://github.com/zsh-users/zsh-autosuggestions <span style="color:#268bd2">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions --depth<span style="color:#719e07">=</span><span style="color:#2aa198">1</span>
Bash
</code></pre></div><div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span style="color:#2aa198">${</span><span style="color:#268bd2">ZSH_CUSTOM</span><span style="color:#719e07">:-</span>~/.oh-my-zsh/custom<span style="color:#2aa198">}</span>/plugins/zsh-syntax-highlighting --depth<span style="color:#719e07">=</span><span style="color:#2aa198">1</span>
</code></pre></div><p>플러그인 설치 후 <code>~/.zshrc</code> 에서 설치한 플러그인을 <code>plugins</code> 에 추가합니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH"><span style="color:#268bd2">plugins</span><span style="color:#719e07">=(</span>
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
 <span style="color:#719e07">)</span>
</code></pre></div><p><strong>Powerline 폰트 or D2 폰트설치</strong></p>
<p>윈도우 폰트에 매뉴얼로 설치 하였습니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">wget https://github.com/powerline/fonts/raw/master/UbuntuMono/Ubuntu%20Mono%20derivative%20Powerline.ttf
wget https://github.com/powerline/fonts/raw/master/UbuntuMono/Ubuntu%20Mono%20derivative%20Powerline%20Italic.ttf
wget https://github.com/powerline/fonts/raw/master/UbuntuMono/Ubuntu%20Mono%20derivative%20Powerline%20Bold.ttf
wget https://github.com/powerline/fonts/raw/master/UbuntuMono/Ubuntu%20Mono%20derivative%20Powerline%20Bold%20Italic.ttf
</code></pre></div><p><strong>window 10 Visual Studio Code 플러그인 설치</strong></p>
<p>The Remote - WSL extension enables you to run Visual Studio Code within the Windows Subsystem for Linux (WSL).
<a href="https://code.visualstudio.com/docs/remote/wsl-tutorial">Remote development in WSL</a>
간단히 Visual Studio Code 터미널로 연결 됩니다. 유레카. !!!
시험삼아 파이썬을 설치 해봅니다.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">sudo apt update
sudo apt install python3 python3-pip
</code></pre></div><p>우아하게 버전확인 해봅니다. (좋네유)</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">python3 --version
</code></pre></div><h2 id="hugo-설치">Hugo 설치</h2>
<hr>
<p>우분투 설치 버전을 설치합니다(행복)</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">sudo apt-get install hugo
</code></pre></div><p><strong>hugo 장점</strong></p>
<ul>
<li>속도가 훨씬 빠르다.</li>
<li>Dynamic site에 <strong>비해 만들기 쉽다.</strong></li>
<li>내가 만들고자 하는 블로그는 <strong>방문객 입장에서 보면 READ ONLY</strong> 이다.</li>
</ul>
<p><strong>간단한 설정 명령</strong></p>
<pre><code>출처 : [IALY's BLOG](https://ialy1595.github.io/post/blog-construct-1/) 
</code></pre>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">hugo new site &lt;프로젝트 이름&gt;
<span style="color:#b58900">cd</span> &lt;프로젝트 이름&gt;
</code></pre></div><div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">$ git clone &lt;테마 github 페이지 주소&gt; themes/&lt;테마 이름&gt;
</code></pre></div><p><code>테마커스트마이징</code>
에도 도전하고 싶으나 Go, HTML, CSS, Java Script 벽에 부디치고 나중에 바로잡으려면 험한 꼴을 봅니다. Hogo Themes Gallary 멀리하고 테마는 하나만 써야 합니다.
<a href="https://ialy1595.github.io/post/blog-construct-2/">IALY&rsquo;s BLOG</a></p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ZSH" data-lang="ZSH">hugo server -D
</code></pre></div><h2 id="github-deploy">Github deploy</h2>
<hr>
<p>다양한 호스팅 가능하고, 저는 Github를 사용합니다. 다양한 장점이 있더이다.</p>
<pre><code>[hosting on github](https://gohugo.io/hosting-and-deployment/hosting-on-github/)
</code></pre>
<p>명령어를 deploy.sh 운영가능 하고, 어찌저찌 makefile로 설정해서 가능하네요.</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-makefile" data-lang="makefile"><span style="color:#586e75"># makefile in &lt;프로젝트이름&gt; 두고, .gitignore 설정도 필요 합니다. 
</span><span style="color:#586e75"># make push 하면 알아서 올려줍니다. 
</span><span style="color:#586e75"></span><span style="color:#268bd2">HUGO</span> <span style="color:#719e07">=</span> hugo

<span style="color:#268bd2">COMMIT_MESSAGE</span> <span style="color:#719e07">=</span> <span style="color:#2aa198">&#34;rebuilding site </span><span style="color:#719e07">$(</span>shell date +%Y-%m-%d<span style="color:#719e07">)</span><span style="color:#2aa198">&#34;</span>

<span style="color:#268bd2">push</span><span style="color:#719e07">:</span>
	<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;\033[0;32mDeploying updates to GitHub...\033[0m&#34;</span>

	rm -rf public 
	git clone https://github.com/yoseobmite/yoseobmite.github.io public
	<span style="color:#719e07">$(</span>HUGO<span style="color:#719e07">)</span> -D
	<span style="color:#b58900">cd</span> ./public <span style="color:#719e07">&amp;&amp;</span> git add . <span style="color:#719e07">&amp;&amp;</span> git commit -m <span style="color:#719e07">$(</span>COMMIT_MESSAGE<span style="color:#719e07">)</span> <span style="color:#719e07">&amp;&amp;</span> git push
</code></pre></div><h2 id="shortcord-및-추가-기능">shortcord 및 추가 기능</h2>
<hr>
<p><strong>image</strong> shortcord 기능이 내장되어 있는 테마 여서 기록해 둡니다.</p>
<p>Properties:</p>
<p><code>src</code> (required)</p>
<p><code>alt</code> (optional)</p>
<p><code>position</code> (optional, default: left, options: [left, center, right])</p>
<p><code>style</code></p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-zsh" data-lang="zsh">
    <img src="/img/hello.png"  alt="Hello Friend"  class="center"  style="border-radius: 8px;"  />


</code></pre></div><p>이제 선택한 테마 에 추가기능을 넣어 봅니다.</p>
<ul>
<li><a href=""></a></li>
<li><a href="https://graspthegist.com/2017/01/20/using-github-gist-gem/">gist 설정</a></li>
<li><a href="https://blog.outsider.ne.kr/1356?category=1">utterances로 댓글추가 기능넣기</a></li>
<li><a href="https://geoffruddock.com/math-typesetting-in-hugo/">Latex 용 Mathjax 변경하기</a></li>
<li>[블러그 검색기 만들기](#만만치 않은 주제군요 언젠간 달겠져..)</li>
</ul>
<h3 id="글쓰기에-집중하기-냐-go--themes-를-더파볼지-고민-해야겠네요">글쓰기에 집중하기 냐, Go , Themes 를 더파볼지 고민 해야겠네요.</h3>
]]></content>
        </item>
        
        <item>
            <title>GS Macro</title>
            <link>https://yoseobmite.github.io/posts/2020/07/gs-macro/</link>
            <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/gs-macro/</guid>
            <description>gist  image Goldman Sachs Macro At a Glance
latex $$\int_{a}^{b} x^2 dx$$ The following
$$\int_{a}^{b} x^2 dx$$
Is an integral
$$ \begin{align} \vec{a} \cdot \vec{b} &amp;amp;= |\vec{a}||\vec{b}|cos\theta \\\\\ &amp;amp;= a_1b_1+a_2b_2 \end{align} $$ $$ \begin{align} \vec{a} \cdot \vec{b} &amp;amp;= |\vec{a}||\vec{b}|cos\theta \\
&amp;amp;= a_1b_1+a_2b_2 \end{align} $$
$$ \begin{align} A^{\[0\]} &amp;amp; = Input Feature &amp;amp; (1) \\\\\ Z^{\[1\]} &amp;amp; = W^{\[1\]}A^{\[0\]} &amp;amp; (2) \\\\\ A^{\[1\]} &amp;amp; = g(Z^{\[1\]}) &amp;amp; (3) \\\\\ Z^{\[2\]} &amp;amp; = W^{\[2\]}A^{\[1\]} &amp;amp; (4) \\\\\ A^{\[2\]} &amp;amp; = g(Z^{\[2\]}) &amp;amp; (5) \end{align} $$ $$ \begin{align} A^{[0]} &amp;amp; = Input Feature &amp;amp; (1) \\</description>
            <content type="html"><![CDATA[<h3 id="gist">gist</h3>
<script type="application/javascript" src="https://gist.github.com/yoseobmite/fd3d384b5edb8f4437a3d71e660b473b.js"></script>

<h3 id="image">image</h3>
<p>Goldman Sachs Macro At a Glance</p>

    <img src="https://user-images.githubusercontent.com/33090364/87234211-27b45e00-c3cf-11ea-858a-67c12c22a259.png"  alt="GS Macro"  class="center"  />


<h3 id="latex">latex</h3>
<pre><code>$$\int_{a}^{b} x^2 dx$$
</code></pre><p>The following</p>
<p>$$\int_{a}^{b} x^2 dx$$</p>
<p>Is an integral</p>
<pre><code>$$
\begin{align}
\vec{a} \cdot \vec{b} &amp;= |\vec{a}||\vec{b}|cos\theta \\\\\
&amp;= a_1b_1+a_2b_2
\end{align}
$$
</code></pre><p>$$
\begin{align}
\vec{a} \cdot \vec{b} &amp;= |\vec{a}||\vec{b}|cos\theta \\<br>
&amp;= a_1b_1+a_2b_2
\end{align}
$$</p>
<pre><code>$$
\begin{align}
A^{\[0\]} &amp; = Input Feature &amp; (1) \\\\\
Z^{\[1\]} &amp; = W^{\[1\]}A^{\[0\]} &amp; (2) \\\\\
A^{\[1\]} &amp; = g(Z^{\[1\]}) &amp; (3) \\\\\
Z^{\[2\]} &amp; = W^{\[2\]}A^{\[1\]} &amp; (4) \\\\\
A^{\[2\]} &amp; = g(Z^{\[2\]}) &amp; (5)
\end{align}
$$
</code></pre><p>$$
\begin{align}
A^{[0]} &amp; = Input Feature &amp; (1) \\<br>
Z^{[1]} &amp; = W^{[1]}A^{[0]} &amp; (2) \\<br>
A^{[1]} &amp; = g(Z^{[1]}) &amp; (3) \\<br>
Z^{[2]} &amp; = W^{[2]}A^{[1]} &amp; (4) \\<br>
A^{[2]} &amp; = g(Z^{[2]}) &amp; (5)
\end{align}
$$</p>
<pre><code>$$
\begin{align}
Cost &amp; = \frac{1}{2}(\hat{Y}-Y)^2  &amp; (1)\\\\\
\frac{\partial Cost}{\partial A^{\[2\]}} &amp; = \hat{Y}-Y &amp; (2)\\\\\  
sigmoid(Z^{\[l\]]}) &amp; = sigmoid(Z^{\[l\]]})(1-sigmoid(Z^{\[l\]]})) &amp; (3)\\\\\
&amp; = A^{\[l\]}(1-A^{\[l\]}) \\\\\
\frac{\partial Z^{\[l\]}}{\partial W^{\[2\]}} &amp; = \frac{\partial A^{\[l-1\]}W^{\[l\]}}{\partial W^{\[l\]}} = A^{\[l-1\]} &amp; (4) \\\\\  
\end{align}
$$
</code></pre><p>$$
\begin{align}
Cost &amp; = \frac{1}{2}(\hat{Y}-Y)^2  &amp; (1)\\<br>
\frac{\partial Cost}{\partial A^{[2]}} &amp; = \hat{Y}-Y &amp; (2)\\\<br>
sigmoid(Z^{[l]]}) &amp; = sigmoid(Z^{[l]]})(1-sigmoid(Z^{[l]]})) &amp; (3)\\<br>
&amp; = A^{[l]}(1-A^{[l]}) \\<br>
\frac{\partial Z^{[l]}}{\partial W^{[2]}} &amp; = \frac{\partial A^{[l-1]}W^{[l]}}{\partial W^{[l]}} = A^{[l-1]} &amp; (4) \\\<br>
\end{align}
$$</p>
<pre><code>$$
\begin{align}
\Delta W^{\[2\]} &amp; = \frac{\partial Cost}{\partial W^{\[2\]}} \\\\\
&amp; = \frac{\partial Cost}{\partial A^{\[2\]}}\frac{\partial A^{\[2\]}}{\partial W^{\[2\]}} \\\\\
&amp; =  \frac{\partial Cost}{\partial A^{\[2\]}}\frac{\partial A^{\[2\]}}{\partial Z^{\[2\]}}\frac{\partial Z^{\[2\]}}{\partial W^{\[2\]}} \\\\\
&amp; =  (\hat{y}-y)\frac{\partial A^{\[2\]}}{\partial Z^{\[2\]}}\frac{\partial Z^{\[2\]}}{\partial W^{\[2\]}} \\\\\
&amp; =  (\hat{y}-y)g'(z^{\[2\]})\frac{\partial Z^{\[2\]}}{\partial W^{\[2\]}} \\\\\
&amp; =  (\hat{y}-y)sigmoid'(z^{\[2\]})\frac{\partial Z^{\[2\]}}{\partial W^{\[2\]}} \\\\\
&amp; =  (\hat{y}-y)A^{\[2\]}(1-A^{\[2\]})\frac{\partial Z^{\[2\]}}{\partial W^{\[2\]}} \\\\\
&amp; =  (\hat{y}-y)A^{\[2\]}(1-A^{\[2\]})A^{\[1\]}
\end{align}
$$
</code></pre><p>$$
\begin{align}
\Delta W^{[2]} &amp; = \frac{\partial Cost}{\partial W^{[2]}} \\<br>
&amp; = \frac{\partial Cost}{\partial A^{[2]}}\frac{\partial A^{[2]}}{\partial W^{[2]}} \\<br>
&amp; =  \frac{\partial Cost}{\partial A^{[2]}}\frac{\partial A^{[2]}}{\partial Z^{[2]}}\frac{\partial Z^{[2]}}{\partial W^{[2]}} \\<br>
&amp; =  (\hat{y}-y)\frac{\partial A^{[2]}}{\partial Z^{[2]}}\frac{\partial Z^{[2]}}{\partial W^{[2]}} \\<br>
&amp; =  (\hat{y}-y)g&rsquo;(z^{[2]})\frac{\partial Z^{[2]}}{\partial W^{[2]}} \\<br>
&amp; =  (\hat{y}-y)sigmoid&rsquo;(z^{[2]})\frac{\partial Z^{[2]}}{\partial W^{[2]}} \\<br>
&amp; =  (\hat{y}-y)A^{[2]}(1-A^{[2]})\frac{\partial Z^{[2]}}{\partial W^{[2]}} \\<br>
&amp; =  (\hat{y}-y)A^{[2]}(1-A^{[2]})A^{[1]}
\end{align}
$$</p>
<pre><code>$$
\begin{align}
\Delta W^{\[2\]} &amp; =
  \begin{bmatrix}
    \Delta w^{\[1\]}11 &amp; \Delta w^{\[1\]}12   \\\\\
  \end{bmatrix} \\\\\
  &amp; =\begin{bmatrix}
    (\hat{y}-y)a^{\[2\]}_1(1-a^{\[2\]}_1)a^{\[1\]}_1 &amp; (\hat{y}-y)a^{\[2\]}_1(1-a^{\[2\]}_1)a^{\[1\]}_2   \\\\\
  \end{bmatrix} \\\\\
  &amp; =(\hat{y}-y)a^{\[2\]}_1(1-a^{\[2\]}_1) \begin{bmatrix}
    a^{\[1\]}_1 &amp; a^{\[1\]}_2   \\\\\
  \end{bmatrix}
\end{align}
$$
</code></pre><p>$$
\begin{align}
\Delta W^{[2]} &amp; =
\begin{bmatrix}
\Delta w^{[1]}11 &amp; \Delta w^{[1]}12   \\<br>
\end{bmatrix} \\<br>
&amp; =\begin{bmatrix}
(\hat{y}-y)a^{[2]}_1(1-a^{[2]}_1)a^{[1]}_1 &amp; (\hat{y}-y)a^{[2]}_1(1-a^{[2]}_1)a^{[1]}_2   \\<br>
\end{bmatrix} \\<br>
&amp; =(\hat{y}-y)a^{[2]}_1(1-a^{[2]}_1) \begin{bmatrix}
a^{[1]}_1 &amp; a^{[1]}_2   \\<br>
\end{bmatrix}
\end{align}
$$</p>
<pre><code>$$
\begin{align}
OutputRowSize &amp; = \frac{InputRowSize}{PoolingSize} \\\\\
OutputColumnSize &amp; = \frac{InputColumnSize}{PoolingSize}
\end{align}
$$
</code></pre><p>$$
\begin{align}
OutputRowSize &amp; = \frac{InputRowSize}{PoolingSize} \\<br>
OutputColumnSize &amp; = \frac{InputColumnSize}{PoolingSize}
\end{align}
$$</p>
<pre><code>$$
\begin{align}
Row Size &amp; = \frac{36}{2} = 18 \\\\\
Column Size &amp; =  \frac{28}{2} = 14  
\end{align}
$$
</code></pre><p>$$
\begin{align}
Row Size &amp; = \frac{36}{2} = 18 \\<br>
Column Size &amp; =  \frac{28}{2} = 14<br>
\end{align}
$$</p>
<pre><code>$$
\begin{align}
Row Size &amp; = \frac{N-F}{Strid} + 1 = \frac{18-3}{1} + 1 = 16 \\\\\
Column Size &amp; =  \frac{N-F}{Strid} + 1 = \frac{14-3}{1} + 1 = 12  
\end{align}
$$
</code></pre><p>$$
\begin{align}
Row Size &amp; = \frac{N-F}{Strid} + 1 = \frac{18-3}{1} + 1 = 16 \\<br>
Column Size &amp; =  \frac{N-F}{Strid} + 1 = \frac{14-3}{1} + 1 = 12<br>
\end{align}
$$</p>
<pre><code>$$
cost(W, b) = \frac{1}{m}\sum_i^m{L(\hat{y^i}, y^i)} + \lambda\frac{1}{2}||w||^2
$$
&lt;/font&gt;
</code></pre><p>$$
cost(W, b) = \frac{1}{m}\sum_i^m{L(\hat{y^i}, y^i)} + \lambda\frac{1}{2}||w||^2
$$
<!-- raw HTML omitted --></p>
<pre><code>$$
L_p = (\sum_i^n |x_i|^p)^{\frac{1}{p}}
$$
&lt;/font&gt;
</code></pre><p>$$
L_p = (\sum_i^n |x_i|^p)^{\frac{1}{p}}
$$
<!-- raw HTML omitted --></p>
<pre><code>$$
\begin{align}
L_1 &amp; = (\sum_i^n |x_i|) \\\\\
&amp; = |x_1| + |x_2| + |x_3| + .... + |x_n|  
\end{align}
$$
</code></pre><p>$$
\begin{align}
L_1 &amp; = (\sum_i^n |x_i|) \\<br>
&amp; = |x_1| + |x_2| + |x_3| + &hellip;. + |x_n|<br>
\end{align}
$$</p>
<pre><code>$$
\begin{align}
x &amp; = [1, 2, 3, 4, 5] \\\\\
||x||_1 &amp; = (|1| +|2| +|3| +|4| +|5|) \\\\\
&amp; = 15
\end{align}
$$
</code></pre><p>$$
\begin{align}
x &amp; = [1, 2, 3, 4, 5] \\<br>
||x||_1 &amp; = (|1| +|2| +|3| +|4| +|5|) \\<br>
&amp; = 15
\end{align}
$$</p>
<pre><code>&gt;$$
\begin{align}
tanh(x) &amp; = \frac{1-e^{-x}}{1+e^{-x}} \\\\\
&amp; = \frac{2}{1+e^{-2x}} -1
\end{align}
$$
</code></pre><blockquote>
<p>$$
\begin{align}
tanh(x) &amp; = \frac{1-e^{-x}}{1+e^{-x}} \\<br>
&amp; = \frac{2}{1+e^{-2x}} -1
\end{align}
$$</p>
</blockquote>
<pre><code>&gt;$$
\begin{align}
sigmoid(x) &amp; = \frac{1}{1+e^{-x}}  \\\\\
tanh(x) &amp; = 2sigmoid(2x) -1
\end{align}
$$
</code></pre><blockquote>
<p>$$
\begin{align}
sigmoid(x) &amp; = \frac{1}{1+e^{-x}}  \\<br>
tanh(x) &amp; = 2sigmoid(2x) -1
\end{align}
$$</p>
</blockquote>
<pre><code>$$
\begin{align}
(e^{x})' &amp;= e^{x} \\\\\
(e^{-x})' &amp;= -e^{-x} \\\\\
\big[ \frac{f(x)}{g(x)}\big]' &amp; = \frac{f'(x)g(x)-f(x)g'(x)}{g^2(x)}
\end{align}
$$
</code></pre><p>$$
\begin{align}
(e^{x})&rsquo; &amp;= e^{x} \\<br>
(e^{-x})&rsquo; &amp;= -e^{-x} \\<br>
\big[ \frac{f(x)}{g(x)}\big]&rsquo; &amp; = \frac{f&rsquo;(x)g(x)-f(x)g&rsquo;(x)}{g^2(x)}
\end{align}
$$</p>
<pre><code>&gt;$$
\begin{align}
f(x) &amp; = e^{x}-e^{-x} \\\\\
g(x) &amp; = e^{x}+e^{-x} \\\\\
\frac{d}{dx}tanh(x) &amp; = \big[\frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}\big]' \\\\\
 &amp; =  \big[\frac{f(x)}{g(x)}\big]' \\\\\
 &amp; = \frac{f'(x)g(x)-f(x)g'(x)}{g^2(x)} \\\\\
 &amp; = \frac{(e^{x}-(-e^{-x}))(e^{x}+e^{-x}) - (e^{x}-e^{-x})(e^{x}-e^{-x} )}{(1+e^{-x})^2} \\\\\
 &amp; = \frac{(e^{x}+e^{-x})^2 - (e^{x}-e^{-x})^2}{(e^{x}+e^{-x})^2} \\\\\
 &amp; = \frac{(e^{x}+e^{-x})^2}{(e^{x}+e^{-x})^2} - \frac{(e^{x}-e^{-x})^2}{(e^{x}+e^{-x})^2} \\\\\
 &amp; = 1 - \big[\frac{(e^{x}-e^{-x})}{(e^{x}+e^{-x})}\big]^2 \\\\\
 &amp; = 1 - tanh^2(x) \\\\\
 &amp; = (1 - tanh(x))(1 + tanh(x))
\end{align}
$$
</code></pre><blockquote>
<p>$$
\begin{align}
f(x) &amp; = e^{x}-e^{-x} \\<br>
g(x) &amp; = e^{x}+e^{-x} \\<br>
\frac{d}{dx}tanh(x) &amp; = \big[\frac{e^{x}-e^{-x}}{e^{x}+e^{-x}}\big]&rsquo; \\<br>
&amp; =  \big[\frac{f(x)}{g(x)}\big]&rsquo; \\<br>
&amp; = \frac{f&rsquo;(x)g(x)-f(x)g&rsquo;(x)}{g^2(x)} \\<br>
&amp; = \frac{(e^{x}-(-e^{-x}))(e^{x}+e^{-x}) - (e^{x}-e^{-x})(e^{x}-e^{-x} )}{(1+e^{-x})^2} \\<br>
&amp; = \frac{(e^{x}+e^{-x})^2 - (e^{x}-e^{-x})^2}{(e^{x}+e^{-x})^2} \\<br>
&amp; = \frac{(e^{x}+e^{-x})^2}{(e^{x}+e^{-x})^2} - \frac{(e^{x}-e^{-x})^2}{(e^{x}+e^{-x})^2} \\<br>
&amp; = 1 - \big[\frac{(e^{x}-e^{-x})}{(e^{x}+e^{-x})}\big]^2 \\<br>
&amp; = 1 - tanh^2(x) \\<br>
&amp; = (1 - tanh(x))(1 + tanh(x))
\end{align}
$$</p>
</blockquote>
<pre><code>&gt;$$
\begin{align}
\frac{d}{dx}tanh(x) &amp; = 1- tanh^2(x) \\\\\
 &amp; = (1-tanh(x))(1+tanh(x)) \\\\\
\end{align}
$$
</code></pre><blockquote>
<p>$$
\begin{align}
\frac{d}{dx}tanh(x) &amp; = 1- tanh^2(x) \\<br>
&amp; = (1-tanh(x))(1+tanh(x)) \\<br>
\end{align}
$$</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>“Giraffes Can’t Dance” - read by @brielarson</title>
            <link>https://yoseobmite.github.io/posts/2020/07/giraffes-cant-dance-read-by-brielarson/</link>
            <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/giraffes-cant-dance-read-by-brielarson/</guid>
            <description>savewithstories 인스타그램에서 셀럽들이 나와서 아이들을 위해 동화책을 읽어줍니다. 집에서 자기전 침대에서 읽어주는 분위기라 너무 좋네요. 블링블링 스타들이 동원된 무지막지 프로젝트 입니다.
브리라슨 편을 올려봅니다.    View this post on Instagram        “Giraffes Can’t Dance” by Giles Andreae, illustrated by Guy Parker-Reese (published by @scholasticinc) - read by @brielarson . THIRTY MILLION CHILDREN rely on school for food. Responding to the needs of kids during school closures, @savethechildren and @nokidhungry have a new fund @SAVEWITHSTORIES to support food banks, and mobile meal trucks, and community feeding programs with funds to do what they do best—and also—with educational toys, books, and worksheets to make sure brains are full, as well as bellies.</description>
            <content type="html"><![CDATA[<p><code>savewithstories</code> 인스타그램에서 셀럽들이 나와서 아이들을 위해 동화책을 읽어줍니다. 집에서 자기전 침대에서 읽어주는 분위기라 너무 좋네요. 블링블링 스타들이 동원된 무지막지 프로젝트 입니다.</p>
<p>브리라슨 편을 올려봅니다.


<blockquote class="instagram-media" data-instgrm-captioned data-instgrm-permalink="https://www.instagram.com/tv/B98Mmb3nanz/?utm_source=ig_embed&amp;utm_campaign=loading" data-instgrm-version="12" style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:658px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"><div style="padding:16px;"> <a href="https://www.instagram.com/tv/B98Mmb3nanz/?utm_source=ig_embed&amp;utm_campaign=loading" style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;" target="_blank"> <div style=" display: flex; flex-direction: row; align-items: center;"> <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div> <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;"> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div> <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div></div></div><div style="padding: 19% 0;"></div> <div style="display:block; height:50px; margin:0 auto 12px; width:50px;"><svg width="50px" height="50px" viewBox="0 0 60 60" version="1.1" xmlns="https://www.w3.org/2000/svg" xmlns:xlink="https://www.w3.org/1999/xlink"><g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g transform="translate(-511.000000, -20.000000)" fill="#000000"><g><path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path></g></g></g></svg></div><div style="padding-top: 8px;"> <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;"> View this post on Instagram</div></div><div style="padding: 12.5% 0;"></div> <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;"><div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div> <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div> <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div></div><div style="margin-left: 8px;"> <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div> <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div></div><div style="margin-left: auto;"> <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div> <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div> <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div></div></div></a> <p style=" margin:8px 0 0 0; padding:0 4px;"> <a href="https://www.instagram.com/tv/B98Mmb3nanz/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#000; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none; word-wrap:break-word;" target="_blank">“Giraffes Can’t Dance” by Giles Andreae, illustrated by Guy Parker-Reese (published by @scholasticinc) - read by @brielarson . THIRTY MILLION CHILDREN rely on school for food. Responding to the needs of kids during school closures, @savethechildren and @nokidhungry have a new fund @SAVEWITHSTORIES to support food banks, and mobile meal trucks, and community feeding programs with funds to do what they do best—and also—with educational toys, books, and worksheets to make sure brains are full, as well as bellies. . If you can manage a one time gift of $10, please text SAVE to 20222. If another amount would work better for you, please visit our website—link in bio. There is no maximum and there is no minimum—together we will rise and together we can help. . Thank you and stay safe. XX #SAVEWITHSTORIES</a></p> <p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">A post shared by <a href="https://www.instagram.com/savewithstories/?utm_source=ig_embed&amp;utm_campaign=loading" style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px;" target="_blank"> #SAVEWITHSTORIES</a> (@savewithstories) on <time style=" font-family:Arial,sans-serif; font-size:14px; line-height:17px;" datetime="2020-03-20T03:37:57+00:00">Mar 19, 2020 at 8:37pm PDT</time></p></div></blockquote>
<script async src="//www.instagram.com/embed.js"></script></p>
]]></content>
        </item>
        
        <item>
            <title>klartale new</title>
            <link>https://yoseobmite.github.io/posts/2020/07/klartale-new/</link>
            <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/klartale-new/</guid>
            <description>Raja vil be om en vurdering av planen for bredde-idrett Mange vil at også andre enn topp-idretten skal få drive med sport. Fredag hadde flere idrettsledere et møte med kulturminister Abid Raja. Abid Raja møtte lederne i både Norges Idretts-forbund og Norges Fotball-forbund fredag. De snakket om hva som må til for å starte opp mer av idretten igjen. Den har vært stengt for å hindre smitte av korona. Raja fikk se en plan fra fotball-forbundet.</description>
            <content type="html"><![CDATA[<h2 id="raja-vil-be-om-en-vurdering-av-planen-for-bredde-idrett">Raja vil be om en vurdering av planen for bredde-idrett</h2>
<h2 id="mange-vil-at-også-andre-enn-topp-idretten-skal-få-drive-med-sport-fredag-hadde-flere-idrettsledere-et-møte-med-kulturminister-abid-raja">Mange vil at også andre enn topp-idretten skal få drive med sport. Fredag hadde flere idrettsledere et møte med kulturminister Abid Raja.</h2>
<h3 id="abid-raja-møtte-lederne-i-både-norges-idretts-forbund-og-norges-fotball-forbund-fredag-de-snakket-om-hva-som-må-til-for-å-starte-opp-mer-av-idretten-igjen-den-har-vært-stengt-for-å-hindre-smitte-av-korona">Abid Raja møtte lederne i både Norges Idretts-forbund og Norges Fotball-forbund fredag. De snakket om hva som må til for å starte opp mer av idretten igjen. Den har vært stengt for å hindre smitte av korona.</h3>
<p>Raja fikk se en plan fra fotball-forbundet. Den sier hva de vil gjøre for å hindre smitte, samtidig som at flere skal kunne spille fotball.</p>
<p>– Jeg skrev i et brev til idretten at de måtte lage en plan for å starte opp igjen. Jeg har fått den nå. Den skal jeg sende videre til helse-myndighetene. Det er som skal vurdere den. Så skal de si hva som er mulig å få til uten at det kan føre til mer smitte, sier Raja til nyhetsbyrået NTB.</p>
<blockquote>
<p><strong>Les mer</strong>: Ber om at det blir åpnet for breddefotball fra 1. august</p>
</blockquote>
<p>Han sier det var et bra møte.</p>
<p>– Jeg føler at jeg og Berit Kjøll og og Terje Svendsen har gode møter. Det har vi hatt hele tiden. Møtet i dag var også bra. Jeg er glad for å høre at idretten vil jobbe sammen med oss og at idrettens ledere tar sitt samfunns-ansvar, sier Raja.</p>
<p>Han sier at det neste møte mellom dem tidligst blir 10. august. Da kan også helseminister Bent Høie være med. Raja sier at det er helsemyndighetene som skal vurdere om det kan bli åpnet for bredde-idrett.</p>
<p>Det skal de få bestemme uten at han skal legge press på dem, sier han. Men han skal be de se på saken en gang til.</p>
<blockquote>
<p><strong>Les også</strong>: Åpner for at barn og unge kan spille kamper</p>
</blockquote>
<p>Det er Terje Svendsen glad for. Han er president i fotball-forbundet.</p>
<p>– Vi har tatt ansvar. Og vi er klare til å ta mer ansvar. Det har vi gjort med å lage en plan for hvordan vi kan få i gang bredde-idretten igjen, sier han til NTB. Svendsen er glad for at Raja vil se på planene, og sende det videre til helse-myndighetene.</p>
<p>Han forklarer at de også har laget et opplegg som gjør at klubbene kan lære hva som skal til for at de kan åpne på en trygg måte. Han håper dette kan gjøre at det går raskere å få igang bredde-idretten igjen.</p>
<blockquote>
<p><strong>Les også</strong>: Mer penger til idrett, frivillighet og kultur</p>
</blockquote>
<p>Raja gjentok at det handler om andre ting enn vond vilje. Han sier at han gjerne skulle åpnet mest mulig, så fort som mulig. Han sier dette handler om all idrett, og at rådene har vært å vente.</p>
<p>– Vi åpner for næringsliv, kollektiv-trafikken og reiseliv. Vi vil se hvordan det går først. Vi har ingen vaksine eller behandling som vi vet virker mot korona, sier Raja.</p>
]]></content>
        </item>
        
        <item>
            <title>최근 판데믹상황에서 주의해서 볼 지표들</title>
            <link>https://yoseobmite.github.io/posts/2020/07/%EC%B5%9C%EA%B7%BC-%ED%8C%90%EB%8D%B0%EB%AF%B9%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%84%9C-%EB%B3%BC-%EC%A7%80%ED%91%9C%EB%93%A4/</link>
            <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/%EC%B5%9C%EA%B7%BC-%ED%8C%90%EB%8D%B0%EB%AF%B9%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EC%A3%BC%EC%9D%98%ED%95%B4%EC%84%9C-%EB%B3%BC-%EC%A7%80%ED%91%9C%EB%93%A4/</guid>
            <description>홍춘욱 박사님 블로그에서 받아온 연준 링크를 걸어 봅니다. 판데믹 이후 실물경제는 가늠하기 힘들 정도로 추락하고 확진자 수는 줄어들고 있지 않은 상황에 기업들이 가난해지고 있어 크레딧 위험으로 번지지 않을까 예의 주시 하시고 계신듯 합니다.
  연준자산규모 및 초과지준   미국회사채 가산금리   인플레이션 기대 심리   El-Erian 님의 트윗입니다. 헤지펀드들이 Tesla 주식에 200억불 넘게 숏을 했다던데, 주가는 하늘을 치솟고 있습니다. Just stunning!
With today&amp;#39;s new surge higher, @Tesla stock is now up an eye-popping 55% in just the last two trading weeks.</description>
            <content type="html"><![CDATA[<h2 id="홍춘욱-박사님-블로그에서-받아온-연준-링크를-걸어-봅니다"><code>홍춘욱</code> 박사님 블로그에서 받아온 연준 링크를 걸어 봅니다.</h2>
<p>판데믹 이후 실물경제는 가늠하기 힘들 정도로 추락하고
확진자 수는 줄어들고 있지 않은 상황에 기업들이 가난해지고 있어 크레딧 위험으로 번지지 않을까 예의 주시 하시고 계신듯 합니다.</p>
<ol>
<li>
<p><a href="https://fred.stlouisfed.org/graph/?g=sO0N"><strong>연준자산규모 및 초과지준</strong></a>

    <img src="https://fred.stlouisfed.org/graph/fredgraph.png?g=sO0N"  alt="FED php"  class="center"  />

</p>
</li>
<li>
<p><a href="https://fred.stlouisfed.org/graph/?g=sOLD"><strong>미국회사채 가산금리</strong></a>

    <img src="https://fred.stlouisfed.org/graph/fredgraph.png?g=sOLD"  alt="FED php"  class="center"  />

</p>
</li>
<li>
<p><a href="https://fred.stlouisfed.org/graph/?g=sOLH"><strong>인플레이션 기대 심리</strong></a>

    <img src="https://fred.stlouisfed.org/graph/fredgraph.png?g=sOLH"  alt="FED php"  class="center"  />

</p>
</li>
</ol>
<h3 id="el-erian-님의-트윗입니다"><code>El-Erian</code> 님의 트윗입니다.</h3>
<p>헤지펀드들이 <code>Tesla</code> 주식에 200억불 넘게 숏을 했다던데, 주가는 하늘을 치솟고 있습니다.
<blockquote class="twitter-tweet"><p lang="en" dir="ltr">Just stunning!<br><br>With today&#39;s new surge higher, <a href="https://twitter.com/Tesla?ref_src=twsrc%5Etfw">@Tesla</a> stock is now up an eye-popping 55% in just the last two trading weeks...<a href="https://twitter.com/hashtag/markets?src=hash&amp;ref_src=twsrc%5Etfw">#markets</a> <a href="https://twitter.com/hashtag/stocks?src=hash&amp;ref_src=twsrc%5Etfw">#stocks</a> <a href="https://twitter.com/hashtag/TSLA?src=hash&amp;ref_src=twsrc%5Etfw">#TSLA</a> <a href="https://t.co/u1uGaJD2ok">pic.twitter.com/u1uGaJD2ok</a></p>&mdash; Mohamed A. El-Erian (@elerianm) <a href="https://twitter.com/elerianm/status/1281660342779559938?ref_src=twsrc%5Etfw">July 10, 2020</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</p>
<h3 id="삼프로tv_경제의신과함께-중">&lsquo;삼프로TV_경제의신과함께` 중</h3>
<p>김일구 이코노미스트 예측도 올려봅니다. 21분부터 나오십니다.

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/hOkVGhxa2Yo" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>
]]></content>
        </item>
        
        <item>
            <title>Creating a New blog</title>
            <link>https://yoseobmite.github.io/posts/2020/07/creating-a-new-blog/</link>
            <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/creating-a-new-blog/</guid>
            <description>개요  블로그를 만들 때 고려할 사항과 만드는 방법에 대하여 알려드립니다.
  목차  블로그를 만든 이유 다른 사람들의 이유 미리 고민하면 좋을 것들 어떤 블로그가 완성되어 있을지 상상해보세요!(Check-List) (Where) 어떤 서비스(플랫폼)와 기술을 활용할까? 이 블로그는 어떤 플랫폼을 쓰나요? (How-To) 블로그 구축부터 포스팅까지 배워봅시다.    블로그를 만든 이유  지금 이 포스트를 읽고 계신 여러분은 블로그 하나 만들어 볼까?라는 생각을 분명 한번 이상은 해 보셨을 것이다. 같은 질문에 대한 필자의 대답과 고민의 흔적을 아래에 포스팅 하였으니 이 글이 시행착오를 줄이는데 조금이라도 보탬이 되었으면 한다.</description>
            <content type="html"><![CDATA[<h2 id="개요">개요</h2>
<blockquote>
<p>블로그를 만들 때 고려할 사항과 만드는 방법에 대하여 알려드립니다.</p>
</blockquote>
<ul>
<li>목차
<ul>
<li><a href="#%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A5%BC-%EB%A7%8C%EB%93%A0-%EC%9D%B4%EC%9C%A0">블로그를 만든 이유</a></li>
<li><a href="#%EB%8B%A4%EB%A5%B8-%EC%82%AC%EB%9E%8C%EB%93%A4%EC%9D%98-%EC%9D%B4%EC%9C%A0">다른 사람들의 이유</a></li>
<li><a href="#%EB%AF%B8%EB%A6%AC-%EA%B3%A0%EB%AF%BC%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EA%B2%83%EB%93%A4">미리 고민하면 좋을 것들</a></li>
<li><a href="#%EC%96%B4%EB%96%A4-%EB%B8%94%EB%A1%9C%EA%B7%B8%EA%B0%80-%EC%99%84%EC%84%B1%EB%90%98%EC%96%B4-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%83%81%EC%83%81%ED%95%B4%EB%B3%B4%EC%84%B8%EC%9A%94check-list">어떤 블로그가 완성되어 있을지 상상해보세요!(Check-List)</a></li>
<li><a href="#where-%EC%96%B4%EB%96%A4-%EC%84%9C%EB%B9%84%EC%8A%A4%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%99%80-%EA%B8%B0%EC%88%A0%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%A0%EA%B9%8C">(Where) 어떤 서비스(플랫폼)와 기술을 활용할까?</a></li>
<li><a href="#%EC%9D%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%8A%94-%EC%96%B4%EB%96%A4-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%93%B0%EB%82%98%EC%9A%94">이 블로그는 어떤 플랫폼을 쓰나요?</a></li>
<li><a href="#how-to-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EB%B6%80%ED%84%B0-%ED%8F%AC%EC%8A%A4%ED%8C%85%EA%B9%8C%EC%A7%80-%EB%B0%B0%EC%9B%8C%EB%B4%85%EC%8B%9C%EB%8B%A4">(How-To) 블로그 구축부터 포스팅까지 배워봅시다.</a></li>
</ul>
</li>
</ul>
<h2 id="블로그를-만든-이유">블로그를 만든 이유</h2>
<hr>
<p>지금 이 포스트를 읽고 계신 여러분은 <code>블로그 하나 만들어 볼까?</code>라는 생각을 분명 한번 이상은 해 보셨을 것이다. 같은 질문에 대한 필자의 대답과 고민의 흔적을 아래에 포스팅 하였으니 이 글이 시행착오를 줄이는데 조금이라도 보탬이 되었으면 한다.</p>
<ul>
<li>
<p><strong>종이가 없어서 바위에 정으로라도 글을 새기겠다는 마음가짐</strong><br>
&ldquo;글쓴이에게 이 정도 열망은 있어야 명작이 탄생할 수 있는 것이다.&rdquo; 학부시절 한 은사께서 하신 말씀이다. 이 정도는 너무 거창하지만, 1만 시간의 법칙 때문일까? 요즘들어 부쩍 배우고 익혀온 기술들을 정리하고 싶어 손과 머리가 근질거릴 때가 많았다. 더불어 요즘 큰 관심을 가지고 있는 데이터 사이언스 분야에 대한 배움을 정리할 곳이 간절했다. 비슷한 느낌이 든다면 여러분도 블로그를 운영할 때가 온 것은 아닐까?</p>
</li>
<li>
<p><strong>Relation &gt; Entity</strong><br>
사고방식의 취향이라고 해야할까? 학창 시절부터 단편 지식을 완벽하게 숙지 못했더라도 그 지식이 다른 지식과 연결되어 큰 숲을 이루는 관계에 관심이 많았다. 새로운 것을 배우면 머리 속 수많은 거미줄 어느 모퉁이에 매달아야 하는지 고민을 하게된다. 이런 사고 방식을 충족시킬 수 있는 나만의 지식과 데이터를 쌓기에 블로그만한 것이 없을 것이라 생각했다.</p>
</li>
<li>
<p><strong>프로그래머라면 Jekyll?</strong><br>
이런 허세 때문에 Jekyll 기반의 블로그를 운영하는 것은 아니지만 직업적으로는 꽤 의미있는 일이 된다. 어느 분야에 종사하시는 분일지라도 <code>제너럴리스트 vs 스페셜리스트</code>사이의 고민은 항상 있으실 것이다. 둘 다 정통한 T자형 인재가 정답이겠지만 시간, 재능, 운의 한계로 결코 쉽지만은 않다.<br>
필자는 프로그래머로 Front-end 보다는 Back-end 기술을 주로 다루며, 서비스보다는 공공 위주 프로젝트를 다루기 때문에 트렌드에 노출될 기회가 적다. 적어도 블로그만큼은 자주 다루기 힘든 기술(Front-end), 트렌드에 뒤떨어지지 않는 기술 그리고 다루고 싶은 기술을 활용하여 지적인 욕구도 충족시키고 제너럴리스트로서의 요건도 갖추고 싶었던 것이 이 블로그를 운영하는 또 다른 이유라고 할 수 있겠다.</p>
</li>
<li>
<p><strong>내 두뇌는 CPU, Memory, 하드디스크 어디에 가깝지?</strong><br>
컴퓨터는 크게 사고력을 상징하는 CPU, 메타인지를 상징하는 Memory, 기억력을 상징하는 HardDisk, 습득이 빠르고 생각을 전달하는 능력이 탁월한 I/O 등으로 이루어져 있다고 생각한다.(<del>필자가 멋대로 정한 비유이므로 큰 의미는 두지 않으셨으면 한다.</del>) 필자의 경우는 두뇌를 주로 CPU와 Memory의 기능 위주로 활용한다. 때문에 자연스럽게 타 영역에 대한 보완이 필요했는데 특히 기억력을 보완하기 위한 수단으로 블로그를 운영한다.</p>
</li>
<li>
<p><strong>진리탐구의 연장선</strong><br>
거창하게 써서 부끄럽다. 개똥철학일지는 모르겠지만 내 자식, 지인들에게 그간 노력하며 얻은 지식을 쉽고 빠르게 전달하고 싶은 마음이 컸다. 조금 더 욕심을 부리면 세상 모든 사람들의 시간을 조금이라도 줄여주는데 보탬이 되고 싶다.</p>
</li>
</ul>
<h2 id="다른-사람들의-이유">다른 사람들의 이유</h2>
<hr>
<p>그렇다면 다른 사람들은 왜 블로그를 운영하는 것일까? 이 포스팅을 읽는 분들께는 이 질문이 더 중요할지도 모르겠다. 조사한 바 크고 작은 이유를 간추려 보았다.</p>
<ul>
<li>공유 정신으로 스스로 <code>사회에 기여</code>하는 사람이 되고 싶어서</li>
<li><code>시간을 효율적</code>으로 쓰는 사람으로 보여지는게 마음에 든다.</li>
<li><code>적극</code>적인 사람 또는 <code>열정</code>을 가진 사람으로 보여지는게 좋다.</li>
<li><code>사업가 마인드</code>를 가진 사람으로 보인다.</li>
<li>구글 애드센스를 장착하여 <code>광고 수익</code>을 내기 위해서</li>
<li>사업상 <code>마케팅 수단</code>이 필요하여</li>
<li>1인 기업, 파워블로그 등의 활동으로 <code>수익 창출</code>을 위하여(유튜버와 유사)</li>
<li><code>취미가 글쓰기</code>이거나 쓰는 동안 <code>생각이 정리</code>되며 스트레스가 풀려서</li>
<li>많은 이들과 육아, 가정 등 <code>지식, 노하우</code>를 공유하고 싶어서</li>
<li>배운 지식을 정리하며 <code>메타적 사고</code>를 넓히고자</li>
<li><code>취업</code>, 경력관리, 이직에 도움이 되어서</li>
<li>PC에 쌓여가는 지식을 정리하고, 온라인에 연결하여 <code>접근성</code>을 확보하기 위해서</li>
<li>SNS 할성화 및 <code>온오프라인 모임</code>을 위하여</li>
<li><code>Markdown 등의 기술</code>을 써보고 싶어서, 내용에 방해를 받고싶지 않아서</li>
<li>다른 사람의 정보를 모아놓기 위해서, <code>즐겨찾기</code> 용도로</li>
<li>기타 외로워서, 관심이 필요, 똑똑해보여서, 주위에서 많이들 하길래, 심심해서 등</li>
</ul>
<p>그 외 여러 목적이 있지만 어떤 이유든 글을 쓰기 위한 충분한 동기가 되지 않을까?</p>
<h2 id="미리-고민하면-좋을-것들">미리 고민하면 좋을 것들</h2>
<hr>
<p>미리 고민하지 않으면 블로그 구축 중 은근히 시간을 많이 잡아먹는 요소들로, 만들기로 결정했다면 일상생활 중 미리 고민해놓으면 시간을 상당히 절약할 수 있다.</p>
<ul>
<li>네이밍 : 블로그명, Sitename, .. 등 각종 이름짓기</li>
<li>도메인 보유여부 : 도메인 유지비용 및 네이밍 고려</li>
<li>개발스택, 언어 : MEAN, LAMP, Jsp, Asp, .. 등</li>
<li>솔루션(플랫폼) : 미디엄, 브런치, 티스토리, 네이버, .. 등</li>
<li>호스팅업체 : AWS, Google Cloud, MS Azure, KT Cloud, CAFE24, 가비아, .. 등</li>
<li>연동할 SNS, E-mail 등</li>
</ul>
<h2 id="어떤-블로그가-완성되어-있을지-상상해보세요check-list">어떤 블로그가 완성되어 있을지 상상해보세요!(Check-List)</h2>
<hr>
<p>블로그를 만들기로 마음 먹었다면, 미래에 어떤 모습으로 운영되고 있을지 생각해 볼 필요가 있다.</p>
<ul>
<li>
<p><strong>(What) 뭘 쓰고있나요?</strong><br>
주로 다루게 될 주제가 무엇인지 생각해보는 것이 좋다. 분야는 너무나도 다양하다.</p>
<ul>
<li>일기장, 일상, 전원생활, 철학, 소설, &hellip;</li>
<li>리뷰, 육아, 교육, 주식, 자기계발, &hellip;</li>
<li>게임, 취미, 여행, 요리, 건축, &hellip;</li>
<li>역사, 문화, 정치, 종교, 사회, 과학, 예술, &hellip;등 <br>
흥미있는 주제로 어느 정도 범위를 좁혀놔야 글쓰기의 일상화에 부담이 되지 않아, 가볍게 출발하며 지구력을 얻게되고, 블로그 플랫폼 및 기술 선택 시 도움이 된다.</li>
</ul>
</li>
<li>
<p><strong>(Who) 누가 읽을까요?</strong>
깊게 생각해 볼 문제다.(<del>물론 아무도 없을지도 모른다.ㅎㅎㅎ</del>) 문체, 전개 방식을 선택하는 계기가 되고 플랫폼 선택 후 여러번 삭제했다 다시 만드는 등 시행착오를 줄이게 된다. 더불어 글의 분량, 수준(난이도)을 결정하는데 도움이 된다.</p>
</li>
<li>
<p><strong>(When) 언제 써야 할까요? 계속 쓸 수는 있을까요?</strong>
귀중한 시간을 들여 블로그를 제작한 의미가 퇴색하지 않도록 꾸준히 글을 쓰는 습관이 중요하다. 시간 공간적으로 글쓰기에 문제는 없을지, 계속 운영할 수 있게하는 원동력이 무엇일지, 다시금 <code>Why</code>를 새기면서 스스로의 동기부여가 중요하다.</p>
</li>
<li>
<p><strong>(Why) 왜 쓰고 있나요?</strong><br>
이 질문이 가장 중요하지만, 위에서 이미 답이 나왔기에 블로그를 쓰기로 결정했을 것이다.</p>
</li>
</ul>
<p>여기까지는 생각을 정리해보는 것만으로 충분했다. 이제부터 직접 블로그를 개설하는 방법에 대하여 구체적으로 다루어보겠다.</p>
<h2 id="where-어떤-서비스플랫폼와-기술을-활용할까">(Where) 어떤 서비스(플랫폼)와 기술을 활용할까?</h2>
<hr>
<p>서비스(플랫폼)별 각각 장.단점이 존재하므로, 블로그의 주제 포커싱에 따라 선택이 필요하다. 아래 선정기준을 체크해 본 후, 이어서 <code>한눈에 제시한 비교표</code>를 통해 본인에게 가장 적합한 블로그를 선택하길 바란다.</p>
<ul>
<li>
<p><strong>서비스(플랫폼) 선정기준</strong></p>
<ul>
<li>(비용) 블로그를 만들 수 있다면 돈을 써도 상관없는지?
<ul>
<li>AWS, Google Cloud, MS Azure, KT Cloud, CAFE24, 가비아,.. 등 웹 호스팅 업체를 알아봐야 한다.</li>
</ul>
</li>
<li>(글쓰기 집중) 글쓰기에만 집중하고 싶은지?</li>
<li>(커스터마이징) 홈페이지처럼 내 마음대로 만들고, 바꾸고, 꾸미고 싶은지?</li>
<li>(개인DB) 데이터베이스처럼 평생 내 자료를 소장하고, 에디팅하고 싶고, 분석도 하고 싶은지?</li>
<li>(클릭율) 유저들이 많이 접속하길 희망하는지?</li>
<li>(프로젝트 관리)프로그래머 등 직업적인 특성 상 Git 등의 연동이 필요한지?</li>
</ul>
</li>
<li>
<p><strong><code>&lt;한눈에 보는 서비스별 장.단점&gt;</code></strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">서비스<!-- raw HTML omitted -->(플랫폼)</th>
<th align="center">장점</th>
<th align="center">단점</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">지킬<!-- raw HTML omitted --><a href="https://jekyllrb-ko.github.io/">Jekyll</a></td>
<td align="center">-디자인,기능 거의 무제한 <!-- raw HTML omitted --> -비용 무료/속도 빠름 <!-- raw HTML omitted --> -개인DB화 관리</td>
<td align="center">-양방향 서비스 불가 <!-- raw HTML omitted --> -기능 연동 시 기술적 노하우 필요</td>
</tr>
<tr>
<td align="center">워드프레스<!-- raw HTML omitted --><a href="https://ko.wordpress.com">Wordpress</a></td>
<td align="center">-이지위그(Wysiwyg) 탁월 <!-- raw HTML omitted --> -APM 웹 프로그래밍 운영가능</td>
<td align="center">-유료 호스팅 운영 필요<!-- raw HTML omitted -->(AWS, CAFE24 등) <!-- raw HTML omitted --> -유지보수 상당한 노력 필요</td>
</tr>
<tr>
<td align="center">미디엄<!-- raw HTML omitted --><a href="https://medium.com/">Medium</a></td>
<td align="center">-깔끔한 디자인 <!-- raw HTML omitted --> -서비스 오래 지속될 것으로 예상 <!-- raw HTML omitted --> -포스트에만 집중가능</td>
<td align="center">-커스터마이징, 기능확장 불가 <!-- raw HTML omitted --> -한글 폰트 문제 <!-- raw HTML omitted --> -낯선기능(respanse 등)</td>
</tr>
<tr>
<td align="center">티스토리<!-- raw HTML omitted --><a href="https://www.tistory.com/">Tistory</a></td>
<td align="center">-커스터마이징 자유도 <!-- raw HTML omitted -->-깔끔한 디자인 <!-- raw HTML omitted -->-카운팅 등 다양한 기능</td>
<td align="center">-에디터 Wysiwyg 불편 <!-- raw HTML omitted --> -신규 제작 시 초대장이 필요 <!-- raw HTML omitted --> -기능의 파편화</td>
</tr>
<tr>
<td align="center">텀블러<!-- raw HTML omitted --><a href="https://www.tumblr.com/">Tumblr</a></td>
<td align="center">-Markdown 지원 <!-- raw HTML omitted -->-이미지업로드 간편 <!-- raw HTML omitted -->-다양한 기능</td>
<td align="center">-카테고리, 추천글 기능이 없음 <!-- raw HTML omitted -->-속도문제 <!-- raw HTML omitted -->-기술 블로그에는 취약</td>
</tr>
<tr>
<td align="center">스팀잇<!-- raw HTML omitted --><a href="https://steemit.com/">Steemit</a></td>
<td align="center">-블록체인 포스트에 효과적 <!-- raw HTML omitted --> -스팀달러 Coin 보상</td>
<td align="center">-에디터, 기능이 약간 부족함</td>
</tr>
<tr>
<td align="center">브런치<!-- raw HTML omitted --><a href="https://brunch.co.kr/">Brunch</a></td>
<td align="center">-유사글 연결 기능 <!-- raw HTML omitted -->-깔끔한 디자인 <!-- raw HTML omitted -->-포스트에만 집중 가능 <!-- raw HTML omitted -->-모바일 탁월</td>
<td align="center">-구글 등 해외 검색엔진 노출 문제 <!-- raw HTML omitted -->-커스터마이징 불가 <!-- raw HTML omitted --> -코드 삽입과 gist 지원 불가</td>
</tr>
<tr>
<td align="center">빙글<!-- raw HTML omitted --><a href="https://www.vingle.net">Vingle</a></td>
<td align="center">-카테고리, 태그 기반 구조</td>
<td align="center">-노출이 약함<!-- raw HTML omitted -->-사용자 많지 않음</td>
</tr>
<tr>
<td align="center">포스타입<!-- raw HTML omitted --><a href="https://www.postype.com/">Postype</a></td>
<td align="center">-창작물 판매,후원 가능</td>
<td align="center">-서비스 조기종료 가능성<!-- raw HTML omitted -->(스타트업)</td>
</tr>
<tr>
<td align="center">구글블로그<!-- raw HTML omitted --><a href="https://www.blogger.com">Blogger</a></td>
<td align="center">-검색노출 최고</td>
<td align="center">-검색 노출 외 좋은 점이 없다.</td>
</tr>
<tr>
<td align="center">네이버<!-- raw HTML omitted --><a href="https://blog.naver.com">Naver</a></td>
<td align="center">-국내 클릭율(CTR) 우수 <!-- raw HTML omitted --> -상품 리뷰에 효과적</td>
<td align="center">-구글 등 해외 검색엔진 노출 문제 <!-- raw HTML omitted --> -커스터마이징 불가<!-- raw HTML omitted -->(Markdown 사용불가 등)</td>
</tr>
</tbody>
</table>
<ul>
<li>그 외 블로그
블로그 서비스는 너무나 다양해서 모든 것을 조사할 수는 없다. 다만 입소문이 제법 나있는 블로그 중 개인적인 직관으로 후보에서 제외시켰던 서비스들을 정리하였으니 좀 더 완벽한 조사를 원하신다면 참고하시기 바란다.
<ul>
<li><a href="https://www.squarespace.com/">Squarespace</a></li>
<li><a href="https://www.typepad.com/">TypePad</a></li>
<li><a href="https://www.movabletype.org/">Movable Type</a></li>
<li><a href="https://www.drupal.org/">Drupal</a></li>
<li><a href="https://www.joomla.org/">Joomla</a></li>
<li><a href="https://ko.wix.com">Wix</a></li>
<li><a href="https://www.quv.kr">Weebly</a></li>
<li><a href="https://www.strikingly.com">Strikingly</a></li>
<li><a href="https://ghost.org/">Ghost</a></li>
<li><a href="https://www.hubspot.com/">HubSpot</a></li>
<li><a href="https://www.shopify.com/">Shopify</a></li>
<li><a href="https://www.jimdo.com/">Jimdo</a></li>
</ul>
</li>
</ul>
<h2 id="이-블로그는-어떤-플랫폼을-쓰나요">이 블로그는 어떤 플랫폼을 쓰나요?</h2>
<hr>
<p>github.io 형태의 URL로 서비스가 제공되는 <!-- raw HTML omitted -->Jekyll 기반의 Github Pages 블로그<!-- raw HTML omitted -->이다. 바로 지금 보고계신 블로그가 그 예이다. 선택한 이유는 다음과 같다.</p>
<ul>
<li><code>공짜</code>다. 그런데 유료보다 <code>빠르다</code>.</li>
<li>마크다운(Markdown) 기반 포스트 작성
<ul>
<li>글 작성이 쉽다. <code>글쓰기에 집중</code>하기 쉽다.</li>
<li><code>나만의 데이터베이스</code>를 보유한 효과가 있다.</li>
</ul>
</li>
<li>기능 확장을 위한 Front-End <code>생태계(Eco)가 풍부</code>하고 수준이 뛰어나다.</li>
<li><code>Git</code>, Ruby등의 기술을 습관처럼 익히게 된다. 협업도 가능하다.</li>
<li>디자인, 기능 등 어떤 홈페이지 보다도 <code>다양한 기능</code>을 구현할 수 있다.</li>
<li><code>프로젝트 개발</code> 시 Git을 통한 연동으로 기술 블로그로서 최적의 기능을 제공한다.</li>
<li>블로그 만들고 꾸미는 것보다 <code>Publish에 집중</code>하고 싶다.</li>
<li>서비스(플랫폼, 호스팅 등)가 종료되어도 <code>쉽게 보관, 이동</code>이 가능하다.</li>
<li><code>광고</code>를 달 수 있다.</li>
<li>Jekyll외 Ghost, Hexo 같은 <code>정적 사이트 생성기와 연동</code> 가능하다.</li>
</ul>
<h2 id="how-to-블로그-구축부터-포스팅까지-배워봅시다">(How-To) 블로그 구축부터 포스팅까지 배워봅시다.</h2>
<hr>
<p>만약 필자와 동일하게 Jekyll 기반의 GitHub Pages를 만드시기로 결정했다면 아래 순서대로 포스팅을 읽고 따라하시기만 하면 된다.(각 링크를 클릭) 필자와 다른 어떤 서비스를 이용하시든 쭉 훑어보는 것만으로도 큰 도움이 되실 것이므로 블로그를 구축하는 전체 과정에 대한 개요를 잡는다는 생각으로 읽어주시기 바란다. 대부분 구축방법은 이 범위 내 부분 집합일 뿐이다. 참고로 아직 링크가 걸리지 않은 경우, 조만간 포스팅할 예정이니 양해를 부탁드린다.</p>
<ul>
<li>
<p><code>블로그</code> 구축</p>
<ol>
<li><a href="https://theorydb.github.io/envops/2019/05/02/envops-blog-theme/">블로그 테마(Themes) 고르기 및 환경설정</a></li>
<li><a href="https://theorydb.github.io/envops/2019/05/03/envops-blog-github-pages-jekyll/">GitHub 연동 및 Jekyll 설치</a></li>
<li><a href="https://theorydb.github.io/envops/2019/05/04/envops-blog-posting-prose-io/">Prose.io 연동으로 포스팅을 쉽게! 배포는 더 쉽게!</a></li>
<li>개인의 취향에 맞도록 디자인 및 환경설정 변경</li>
<li>파비콘 만들기</li>
</ol>
</li>
<li>
<p><code>기능</code> 확장 및 연동</p>
<ol>
<li><a href="https://theorydb.github.io/envops/2019/05/11/envops-blog-tipue-search/">Tipue Search를 이용하여 블로그 검색 기능 만들기</a></li>
<li>블로그 댓글기능 추가</li>
<li>구글 애널리틱스로 방문자 유입 분석</li>
<li>구글 검색엔진 등록을 유리하게</li>
<li><a href="https://theorydb.github.io/envops/2020/04/20/envops-blog-how-to-register-google-adsense/">구글 애드센스(Google Adsense) 적용하기</a></li>
<li>편리한 운영을 위한 기타 설정 및 오류 발생시 대처방법</li>
</ol>
</li>
<li>
<p><code>글쓰기</code>를 편하게</p>
<ol>
<li><a href="https://theorydb.github.io/envops/2019/05/21/envops-blog-how-to-use-git/">GitHub &amp; Jekyll 사용법</a></li>
<li><a href="https://theorydb.github.io/envops/2019/05/22/envops-blog-how-to-use-md/">마크다운(Markdown) 사용법 및 예제</a></li>
<li>이미지 캡션 활용</li>
</ol>
</li>
</ul>
<p>이로써 블로그를 구축해야 하는 목적, 방법 등 전반적인 모든 것을 알아보았다. 앞으로도 유용한 기능을 계속 올릴 예정이니 관심있게 지켜봐주시길 부탁드린다.</p>
]]></content>
        </item>
        
        <item>
            <title>How to Markdown</title>
            <link>https://yoseobmite.github.io/posts/2020/07/how-to-markdown/</link>
            <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2020/07/how-to-markdown/</guid>
            <description>출처 : theorydb.github.io
개요  지금 당장 필요한 마크다운(Markdown) 문법부터 단계적으로 배워봅시다.
  목차  Markdown이란? Markdown 에디터 뭘 쓸까? Markdown 문법1(반드시 알아야 하는) Markdown 문법2(유용한 부가기능) 실전연습 이미지를 쉽게 업로드 하는 방법 소소한 Tip 그리고 고장났을 때    Markdown이란?  Markdown은 문서 작성을 지원하는 태그(Tag) 형식의 문법이다.
 What is Markdown? (출처 - 위키백과)
마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법이다. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰인다.</description>
            <content type="html"><![CDATA[<p>출처 : <a href="https://theorydb.github.io">theorydb.github.io</a></p>
<h2 id="개요">개요</h2>
<blockquote>
<p>지금 당장 필요한 <code>마크다운(Markdown)</code> 문법부터 단계적으로 배워봅시다.</p>
</blockquote>
<ul>
<li>목차
<ul>
<li><a href="#markdown%EC%9D%B4%EB%9E%80">Markdown이란?</a></li>
<li><a href="#markdown-%EC%97%90%EB%94%94%ED%84%B0-%EB%AD%98-%EC%93%B8%EA%B9%8C">Markdown 에디터 뭘 쓸까?</a></li>
<li><a href="#markdown-%EB%AC%B8%EB%B2%951%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%98%EB%8A%94">Markdown 문법1(반드시 알아야 하는)</a></li>
<li><a href="#markdown-%EB%AC%B8%EB%B2%952%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%B6%80%EA%B0%80%EA%B8%B0%EB%8A%A5">Markdown 문법2(유용한 부가기능)</a></li>
<li><a href="#%EC%8B%A4%EC%A0%84%EC%97%B0%EC%8A%B5">실전연습</a></li>
<li><a href="#%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EC%89%BD%EA%B2%8C-%EC%97%85%EB%A1%9C%EB%93%9C-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95">이미지를 쉽게 업로드 하는 방법</a></li>
<li><a href="#%EC%86%8C%EC%86%8C%ED%95%9C-tip-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B3%A0%EC%9E%A5%EB%82%AC%EC%9D%84-%EB%95%8C">소소한 Tip 그리고 고장났을 때</a></li>
</ul>
</li>
</ul>
<h2 id="markdown이란">Markdown이란?</h2>
<hr>
<p><a href="http://kirkstrobeck.github.io/whatismarkdown.com/">Markdown</a>은 문서 작성을 지원하는 태그(Tag) 형식의 문법이다.</p>
<blockquote>
<p><strong>What is Markdown? (출처 - 위키백과)</strong><br>
마크다운(markdown)은 일반 텍스트 문서의 양식을 편집하는 문법이다. README 파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰인다. 마크다운을 이용해 작성된 문서는 쉽게 HTML 등 다른 문서형태로 변환이 가능하다.</p>
</blockquote>
<ul>
<li>
<p><strong>익숙한 MSWord나 한글(HWP)로 작성하면 안 되나요?</strong><br>
가능하다. 하지만 <code>WEB에서 글을 쓰고 싶다면</code> 이 둘은 적합한 도구가 아니다. 세상의 거의 모든 컨텐츠가 WEB 기반으로 생산되고 소비되기 때문에 이 문제는 중요하다. 물론 이런 편집기로도 Save As(다른 이름으로 저장) 기능을 통해 HTML 확장자로 변환 후 WEB에 올릴수도 있지만 변환된 소스코드의 양과 복잡도를 보면 경악을 금치 못하게 된다. 더욱이 스타일, 표 등이 온전하게 변환되지 않아 원본과 동일한 품질로 보기 어렵다.</p>
</li>
<li>
<p><strong>WEB문서라면 HTML이나 웹 프로그래밍 언어를 써도 되잖아요.</strong><br>
가능하다. 하지만 <code>생산성(작성 속도 및 편리성)에 큰 차이</code>가 있다. 더욱이 WEB언어를 모르는 사람이라면 익숙하지 않은 프로그래밍의 문법을 다시 배우고 능숙해지는데 있어 상당한 노력과 시간을 필요로 하게 될 것이다.</p>
</li>
<li>
<p><strong>그 외에 좋은점은 뭔가요?</strong></p>
<ul>
<li>배우기가 정말 <code>쉽고 직관적</code>이다.</li>
<li>Text로 저장 후 <code>HTML으로의 변환이 가능</code>하다. 변환을 지원하는 도구나 Eco(생태계)가 매우 많다.</li>
<li>Text로 저장하기 때문에 <code>Git을 통한 버전관리가 가능</code>하고, 용량이 적어 <code>보관이 용이</code>하다.</li>
<li>Python의 Jupyter Notebook, R의 R Markdown 등 다른 기술을 익히는데 있어 훌륭한 커뮤니케이션 도구로써 가치가 있다.</li>
</ul>
</li>
<li>
<p><strong>안 좋은점은?</strong><br>
유일하게 안 좋은 점이 하나 있는데 표준이 없다. 핵심 문법을 제외하고는 에디터에 따라 결과물이 달라질 수 있다.</p>
</li>
</ul>
<h2 id="markdown-에디터-뭘-쓸까">Markdown 에디터 뭘 쓸까?</h2>
<hr>
<p>윈도우 메모장도 상관없다. 하지만 그따위 것을 쓰려고 이 포스팅을 보시진 않을 것이다.</p>
<ul>
<li>
<p><strong>선정기준</strong></p>
<ul>
<li><strong>Q.</strong> 다양한 표현이 가능한가?<br>
논문 수준 수식, 다양한 Icon 이미지, Code Block, UML 다이어그램,.. 등</li>
<li><strong>Q.</strong> 어디에 저장되니?<br>
PC에만 저장되어서 USB에 들고 다녀야 하는건지? 클라우드 개념으로 어디서든 수정 가능한지?</li>
<li><strong>Q.</strong> 퍼블리쉬(Publish) 지원여부?<br>
Git, 구글드라이브, 블로거, 드랍박스, 워드프레스, 텀블러, PC, 개발서버, .. 등</li>
<li>Q. 얼마면 돼? 얼마나 편리한데? 등</li>
<li>그 외 온라인(인터넷)이 차단(비행기, 네트워크 장애, 비용 문제 등)될 때도 대비할 필요가 있다.</li>
</ul>
</li>
<li>
<p><strong>추천 에디터</strong></p>
<ul>
<li><a href="https://theorydb.github.io/envops/2019/07/04/envops-blog-posting-prose-io/">Prose.io</a>
<ul>
<li>어디서나 접속 가능하다.</li>
<li>Git에 접속하여 <code>배포없이 바로 Markdown의 수정이 가능</code>하다.</li>
<li>위 링크를 클릭하여 필자가 작성한 Prose.io 설치 및 사용법을 알아보자.</li>
</ul>
</li>
<li><a href="https://stackedit.io">StackEdit</a>
<ul>
<li>위에 열거한 <code>구글드라이브, Git, 텀블러 전부 저장 및 배포</code> 가능하다.</li>
<li>어느 PC에서 접속해도 <code>동시성이 보장</code>된다.</li>
<li>예쁜 Icon부터 논문 수식까지 거의 모든 마크다운 표현이 가능하다.</li>
</ul>
</li>
<li><a href="http://markdownpad.com/">MarkdownPad</a>
<ul>
<li>위 링크에서 다운로드 가능하다. 단, 무료버전은 한계가 많다.(특히 편집탭이 4개밖에 열리지 않는다.)</li>
<li>클라우드 공유 방식이 아닌 PC에 설치하는 프로그램이다. 기능이 아주 뛰어나진 않다.</li>
<li>가끔 <code>서버가 다운되거나 인터넷이 느린 경우</code> PC에서 작업하기 때문에 사용할 수 있다는 점이 장점이다.</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>그 외의 에디터</strong></p>
<ul>
<li><a href="https://macdown.uranusjr.com/">MacDown(for MAC)</a></li>
<li><a href="https://jbt.github.io/markdown-editor">https://jbt.github.io/markdown-editor</a></li>
</ul>
</li>
</ul>
<p>필자의 경우 위 세가지 모두 사용한다. 인터넷이 느린 반응을 보일 경우 Markdown Pad로 초안을 작성하고, StackEdit에서 보정 및 예쁜 시각화 지원을 이용한 후 Git을 통해 배포한다. 이후 경미한 수정을 할 경우 배포까지 하는 것은 배보다 배꼽이 큰 형국이므로, Prose를 이용하여 즉시 수정한다.</p>
<p>일단 <code>초보자</code>라면 또는 포스트를 보고 실습을 원하신다면 위의 Markdown Pad 공식 사이트 링크를 클릭하여 PC에 설치 후 아래 소개될 문법을 익히며 예제를 따라 타이핑해보자. 설치가 아주 쉽다. 그냥 다운로드 버튼으로 다운받아 Next 버튼만 누르면 금방 깔린다.</p>
<p>온라인 에디터의 경우 퍼블리쉬 등 클라우드 환경의 복잡한 부가 기능을 배우느라 Markdown 자체에 집중을 못할 수도 있다. 나중에 차차 익히면 되므로 먼저 Markdown을 익히는 것에 집중하자.</p>
<h2 id="markdown-문법1반드시-알아야-하는">Markdown 문법1(반드시 알아야 하는)</h2>
<hr>
<p>글을 작성할 때 마다 꼭 사용하는 문법들만 간추려 글을 쓰는 순서 및 흐름대로 기술하였다. 초보자라면 이 부분만 숙지해도 오늘을 보람찬 날로 만들 수 있을 것이다. 너무 쉬워 더 어려운 문법을 배우고 싶으시다면 다음 Chapter인 <a href="#">Markdown의 기타 문법</a>으로 넘어가시기 바란다.</p>
<p>실습은 간단하다. 마크다운 에디터를 실행한 후, 아래의 [1단계] ~ [8단계]까지 회색박스의 코드를 직접 손으로 코딩하신 후, 미리보기 화면으로 어떻게 보이는지 확인하시면 된다.</p>
<hr>
<ul>
<li><strong>[1단계] <code>헤더(Header)</code> : 제목, 문단별 제목을 쓰고 싶을 때</strong><br>
글의 구조(개요) 및 큰 틀을 잡을 때 사용한다.</li>
</ul>
<pre><code># 제목 1단계
## 제목 2단계  
### 제목 3단계
#### 제목 4단계
##### 제목 5단계
###### 제목 6단계 
</code></pre><h1 id="제목-1단계">제목 1단계</h1>
<h2 id="제목-2단계">제목 2단계</h2>
<h3 id="제목-3단계">제목 3단계</h3>
<h4 id="제목-4단계">제목 4단계</h4>
<h5 id="제목-5단계">제목 5단계</h5>
<h6 id="제목-6단계">제목 6단계</h6>
<hr>
<ul>
<li><strong>[2단계] <code>수평선</code> : 내용을 명시적으로 구분하고 싶을 때</strong></li>
</ul>
<pre><code>---
</code></pre><hr>
<hr>
<ul>
<li><strong>[3단계] <code>엔터키(줄바꿈, 개행)</code> : 라인을 바꾸고 싶을 때</strong></li>
</ul>
<pre><code>띄어쓰기 2번을 입력하면.(from)  (to)&lt;!-- from과 to 사이에 스페이스 2번 입력--&gt;
줄이 바뀐다.
​```

띄어쓰기 2번을 입력하면.(from)  (to)
줄이 바뀐다.
    
---
*  __[4단계] `목록(List)` : 요소를 나열할 때__  

</code></pre><ol>
<li>첫번째</li>
<li>두번째</li>
<li>세번째</li>
</ol>
<ul>
<li>순서없음
<ul>
<li>홍길동
<ul>
<li>중대장
<ul>
<li>프로실망러
​```</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>첫번째</li>
<li>두번째</li>
<li>세번째</li>
</ol>
<ul>
<li>순서없음
<ul>
<li>홍길동
<ul>
<li>중대장
<ul>
<li>프로실망러</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>[5단계] <code>강조</code> : 문장 내 강조하고 싶은 단어를 눈에 띄게</strong></li>
</ul>
<pre><code>__볼드(진하게)__  
_이탤릭체(기울여서)_    
~~취소선~~  
&lt;u&gt;밑줄&lt;/u&gt;  
__볼드로 진하게 만들다가*이탤릭으로 기울이고*다시 볼드로__(중복 활용도 가능하다.)
​```

__볼드(진하게)__  
_이탤릭체(기울여서)_    
~~취소선~~  
&lt;u&gt;밑줄&lt;/u&gt;  
__볼드로 진하게 만들다가*이탤릭으로 기울이고*다시 볼드로__(중복 활용도 가능하다.)  

---
*  __[6단계] `인용구` : 인용할 경우 또는 분위기 전환시에도 사용(중복 형태 가능)__  

</code></pre><blockquote>
<p>위키백과?</p>
<blockquote>
<p>중대장 드립 검색</p>
<blockquote>
<p>&ldquo;오늘 중대장은 너희에게 실망했다&rdquo;
​```</p>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<p>위키백과?</p>
<blockquote>
<p>중대장 드립 검색</p>
<blockquote>
<p>&ldquo;오늘 중대장은 너희에게 실망했다&rdquo;</p>
</blockquote>
</blockquote>
</blockquote>
<hr>
<ul>
<li><strong>[7단계] <code>링크(Link)</code> : 클릭하면 다른 페이지, 다른 부분으로 이동 가능</strong></li>
</ul>
<pre><code>유형1(`설명어`를 클릭하면 URL로 이동) : [TheoryDB 블로그](https://theorydb.github.io &quot;마우스를 올려놓으면 말풍선이 나옵니다.&quot;)  
유형2(URL 보여주고 `자동연결`) : &lt;https://theorydb.github.io&gt;  
유형3(동일 파일 내 `문단 이동`) : [동일파일 내 문단 이동](#markdown의-반드시-알아야-하는-문법)  
​```

유형1(`설명어`를 클릭하면 URL로 이동) : [TheoryDB 블로그](https://theorydb.github.io &quot;마우스를 올려놓으면 말풍선이 나옵니다.&quot;)  
유형2(URL 보여주고 `자동연결`) : &lt;https://theorydb.github.io&gt;  
유형3(동일 파일 내 `문단 이동`) : [동일파일 내 문단 이동](#markdown의-반드시-알아야-하는-문법)  
&gt;__유형3 문단 매칭방법__ : 제목(header)를 복사 붙여넣기 후,  
&gt; 1) `특수문자`제거  
&gt; 2) 스페이스를 갯수만큼 `-`로 변경  
&gt; 3) 대문자-&gt;`소문자`로 변경   
&gt; 예) &quot;#Markdown!  장점&quot; -&gt; &quot;#markdown--장점&quot;

유형4(상대 경로로 서버 내 파일이동) 기능은 쓸 일이 거의 없어 제외한다.  

---
*  __[8단계] `이미지(Image)` : 이미지 보여주기__  

</code></pre><p>유형1(<code>이미지</code> 삽입) :<br>
<img src="https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png" alt="이미지" title="인공지능"></p>
<p>유형2(<code>사이즈를 조절</code>하고 싶은 경우 HTML 태그로 처리) :<br>
<!-- raw HTML omitted --></p>
<p>유형3(이미지 삽입 후, <code>링크 걸기</code>)
<a href="https://theorydb.github.io/think/2019/06/25/think-future-ai/"><img src="https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png" alt="이미지"></a><br>
​```</p>
<p>유형1(<code>이미지</code> 삽입) :<br>
<img src="https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png" alt="이미지" title="인공지능"></p>
<p>유형2(<code>사이즈를 조절</code>하고 싶은 경우 HTML 태그로 처리) :<br>
<!-- raw HTML omitted --></p>
<p>유형3(이미지 삽입 후, <code>링크 걸기</code>)
<a href="https://theorydb.github.io/think/2019/06/25/think-future-ai/"><img src="https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png" alt="이미지"></a></p>
<p>이상 글을 쓸 때 매번 사용하는 Markdown의 문법을 알아보았다.</p>
<h2 id="markdown-문법2유용한-부가기능">Markdown 문법2(유용한 부가기능)</h2>
<hr>
<p>이 Chapter에서 배울 것들은 위의 기능보다는 사용 빈도가 낮지만 굉장히 고차원 적인 표현을 가능하게 해주는 매우 유용한 문법들이다. 필요할 때마다 참고하여 익히면 큰 도움이 될 것이다.</p>
<hr>
<ul>
<li><strong>[1단계] <code>표(Table)</code> : 표 그리기</strong></li>
</ul>
<pre><code>|                  | 수학                        | 평가              |
|:--- | ---: | :---: |
| 철수             | 90            | 참잘했어요. |
| 영희           | 50            | 분발하세요. |
</code></pre><table>
<thead>
<tr>
<th align="left"></th>
<th align="right">수학</th>
<th align="center">평가</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left">철수</td>
<td align="right">90</td>
<td align="center">참잘했어요.</td>
</tr>
<tr>
<td align="left">영희</td>
<td align="right">50</td>
<td align="center">분발하세요.</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li>라인 단위로 생각하면서 구분자(<code>|</code>)로 열을 구분해주면 위와 같이 대충 그려도 알아서 예쁘게 완성된다.</li>
<li>헤더(머리글)를 분리하고 싶은 경우, 위 예제와 같이 2번째 라인에 <code>---</code>을 사용하면 된다.</li>
<li>정렬이 필요한 경우, 콜론(<code>:</code>) 기호를 구분선(<code>---</code>) 왼쪽, 오른쪽, 양쪽에 배치한다.</li>
</ul>
</blockquote>
<hr>
<ul>
<li><strong>[2단계] <code>수식</code> : 수학, 논문분석 등에 사용</strong></li>
</ul>
<pre><code>$$f(x)= if x &lt; x_{min} : (x/x_{min})^a$$  
$$otherwise : 0$$  
$$P(w)=U(x/2)(7/5)/Z$$  
$$p_{\theta}(x) = \int p_{\theta}(2z)p_{\theta}(y\mid k)dz$$  
$$x = argmax_k((x_t-x_u+x_v)^T*x_m)/(||x_b-x_k+x_l||)$$  
</code></pre><p>$$f(x)= if x &lt; x_{min} : (x/x_{min})^a$$<br>
$$otherwise : 0$$<br>
$$P(w)=U(x/2)(7/5)/Z$$<br>
$$p_{\theta}(x) = \int p_{\theta}(2z)p_{\theta}(y\mid k)dz$$<br>
$$x = argmax_k((x_t-x_u+x_v)^T*x_m)/(||x_b-x_k+x_l||)$$</p>
<blockquote>
<ul>
<li>필자가 사용하는 지킬 테마는 별도 설정없이 위 예제와 같이 자유롭게 사용할 수 있다.</li>
<li>수식 표현에 제한이 있는 경우, <code>MathJax</code> Javascript를 include하여 사용한다.</li>
</ul>
</blockquote>
<pre><code>&lt;script type=&quot;text/javascript&quot; 
src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML&quot;&gt;
&lt;/script&gt;
</code></pre><blockquote>
<ul>
<li>표현형식은 <a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics">Latex</a> 표기법과 동일하다.</li>
<li>몇가지 예를 들자면, 수식은 <code>$$</code>으로 둘러쌓여야 하고 <code>(),{}</code>으로 감싸면 우선순위를 고려한 동일 단위로 인식한다.</li>
</ul>
</blockquote>
<hr>
<ul>
<li><strong>[3단계] <code>코드 블록(Code Block)</code> : 소스코드, 외부 인용자료 블록처리 등에 사용</strong></li>
</ul>
<pre><code>```python
py_vector = one_hot_encoding(&quot;파이&quot;,word2index)
py_vector.dot(torch_vector)
&gt;&gt;&gt; 0.0
​```
</code></pre><div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">py_vector <span style="color:#719e07">=</span> one_hot_encoding(<span style="color:#2aa198">&#34;파이&#34;</span>,word2index)
py_vector<span style="color:#719e07">.</span>dot(torch_vector)
<span style="color:#719e07">&gt;&gt;&gt;</span> <span style="color:#2aa198">0.0</span>
​
</code></pre></div><blockquote>
<ul>
<li>`뒤에 python이라고 쓰면 python 언어 스타일에 맞게 구문이 강조된다.</li>
<li>보통 강조하고 싶은 프로그래밍 언어를 그대로 쓰면 된다.<br>
ex) bash, cpp, dockerfile, markdown, yml, html, http, json, r, ruby, xml, sql &hellip; 등</li>
</ul>
</blockquote>
<hr>
<ul>
<li><strong>[4단계] <code>UML 다이어그램</code> : 순서도, 흐름도 등을 표현할 때 유용하다.</strong><br>
필요시 아래 링크를 참조하기 바란다.</li>
</ul>
<blockquote>
<ul>
<li><a href="http://flowchart.js.org/">Flow charts</a></li>
<li><a href="https://bramp.github.io/js-sequence-diagrams/">Sequence diagrams</a></li>
</ul>
</blockquote>
<h2 id="실전연습">실전연습</h2>
<hr>
<p>자! 이제 Markdown의 거의 모든 문법을 알아보았다. <code>백견이 불여일타</code>이므로 반드시 직접 마크다운 문서를 작성해보자.</p>
<ol>
<li>연습문제1 : 위의 문법 실습을 그대로 타이핑하는 문서 만들기</li>
<li>연습문제2 : 이 포스팅과 동일한 문서 만들기<br>
최대한 정답 없이 위에서 배운 문법을 이용하여 본 포스팅과 동일하게 만들어보자.<br>
성공한다면 앞으로 그 어떤 마크다운 문서 작성도 두렵지 않을 것이다.</li>
</ol>
<blockquote>
<p><strong><code>연습문제2</code> 정답</strong></p>
<ol>
<li><a href="https://github.com/theorydb/theorydb.github.io">필자의 블로그 Github</a>에 접속</li>
<li>우측의 <code>Clone or download</code>(녹색버튼) 클릭</li>
<li><code>/theorydb.github.io-master/_posts/</code> 폴더 이동</li>
<li><code>2019-05-22-envops-blog-how-to-use-md.markdown</code>를 확인</li>
</ol>
</blockquote>
<h2 id="이미지를-쉽게-업로드-하는-방법">이미지를 쉽게 업로드 하는 방법</h2>
<p>이미지를 웹 어디에 저장하는 것이 편리할까? 더불어 포스트 뿐만 아니라 이미지도 마치 데이터베이스 처럼 평생 관리하고 싶다면? 필자가 추천하고 싶은 방식은 크게 3가지이다.</p>
<ul>
<li>
<p><strong>GitHub의 Issue를 이용하는 방법</strong></p>
<ul>
<li>일종의 편법인데 GitHub에서 <code>Issue를 하나 생성</code>한다.<br>
<img src="https://theorydb.github.io/assets/img/envops/2019-07-22-envops-blog-how-to-use-md-1.jpg" alt="이미지1"></li>
<li>Write 탭에 PC에 있는 이미지를 <code>Drag &amp; Drop</code>한다. 최종 저장을 안해도 GitHub에 자동으로 업로드가 된다.
<img src="https://theorydb.github.io/assets/img/envops/2019-07-22-envops-blog-how-to-use-md-2.jpg" alt="이미지2"></li>
<li>업로드가 다 되면 위 그림과 같은 경로가 생기므로 <code>해당 URL을 복사해서 사용</code>한다. 테스트로 복사한 URL로 접속해보았다.
<img src="https://theorydb.github.io/assets/img/envops/2019-07-22-envops-blog-how-to-use-md-3.jpg" alt="이미지3"></li>
<li>이 방식은 즉석 URL을 생성하는데는 최고의 방법이나, 대신 이미지를 체계적으로 관리하기가 어렵다. 대신 중요하지 않은 그림은 이 방식으로 운영하면 편리하다고 하겠다.</li>
</ul>
<blockquote>
<p><strong>쉬어가며</strong><br>
저장할지 취소할지 결정되지 않은 작성중인 글에 종속된 이미지를 저장하는 것은 분명 자원 낭비다. 보통 이런 웹프로그램을 개발할 때는 브라우저의 Cache Storage 같은 영역에 임시로 올려두고 글의 저장 요청이 발생하는 순간 같이 전송시켜 I/O 접근을 최소화한다.<br>
또, 단순히 저장공간 낭비만의 문제가 아니다. 네트워크 사용량이 증가하기 때문이다. 만약 AWS같은 클라우드 인프라 위에 이런 프로그램을 개발한다면 엄청난 네트워크 사용량을 유발하게 되고 속도, 저장 공간 문제를 떠나 네트워크 사용량에 따른 과금 폭탄을 맞게 될 것이다.<br>
그런데 GitHub이 그걸 몰라서 이렇게 자원을 낭비하는 프로그램을 개발했을까? 원래도 GitHub은 소스 코드부터 이미지까지 무한에 가깝게 업로드 가능한 저장소이다. 더불어 짧은 생각에 GitHub Pages를 운영하는 사람들이 편리하게 이미지 관리를 할 수 있도록 서비스 개념으로 열어두지 않았을까 싶기도 한다. 한 수 더 바라보면 딥러닝 등에 활용하지 않을까 싶기도 하고..<br>
아무튼 이렇게 계속 퍼주기만 하는 Git 당신은 도대체&hellip; 리스펙트 그 이상이다.</p>
</blockquote>
</li>
<li>
<p><strong>GitHub를 이용하는 방법</strong></p>
<ul>
<li>필자가 자주 애용하는 방식이다.</li>
<li>예를 들면 <code>theorydb.github.io\assets\img\</code>의 위치에 포스트 계층과 동일하게 폴더를 만들어 <code>포스트 제목-일련번호</code>의 형태로 파일을 저장한 후, <code>https://theorydb.github.io/assets/img/think/2019-06-25-think-future-ai-1.png</code>와 같은 방식으로 링크를 걸어 활용한다.</li>
<li>물론, 이미지 파일 관리에 있어 노가다가 첨가되고 GitHub에 이미지를 먼저 올리지 않으면 Markdown을 작성하며 실시간으로 확인할 수 없다는 불편한 점이 있다.</li>
<li>하지만 필자가 처음 블로그를 개발했을 때 가장 중요했던 목적 하나는 블로그 서비스가 종료되더라도 포스트와 이미지를 개인 DB화 하여 영구 보존하는 것이었기에 큰 불만이 없는 방식이다. 더불어 숙달되어 큰 불편을 느끼지 않는다.</li>
</ul>
</li>
<li>
<p><strong>기타</strong></p>
<ul>
<li>구글드라이브, 플리커, 드랍박스에 이미지를 체계적으로 관리하고 URL을 생성하여 연결하는 것도 한가지 방법이다.</li>
<li>큰 불편함을 느끼지 않아 더 찾아보지는 않았는데 이 부분을 쉽게 처리해 줄 Plug-in이 존재할 것으로 믿는다.ㅎㅎ</li>
</ul>
</li>
</ul>
<h2 id="이미지-만들기-막막할-때">이미지 만들기 막막할 때</h2>
<ul>
<li>
<p><strong>간단한 이미지는 <code>직접</code> 만들자</strong> <br>
간단한 도식이나 관계도를 정도는 쉽게 만들수 있도록 서비스를 제공하는 사이트를 추천해보겠다.</p>
<ul>
<li>
<ol>
<li><a href="https://www.autodraw.com/"><code>오토드로우</code></a><br>
정말 자주 애용하는 등장한지 얼마 안된 따끈따끈한 사이트로 강추한다. 마우스로 대충 그리면 그와 유사한 이미지를 AI가 추천하여 선택할 수 있게 해준다.</li>
</ol>
</li>
<li>
<ol start="2">
<li>간단한 그림을 그릴 수 있게 도와주는 사이트</li>
</ol>
</li>
</ul>
</li>
<li>
<p><strong><code>무료 이미지</code> 제공 Site</strong><br>
도저히 개인 실력으로 만들 수 없는 고급 퀄리티 이미지는 아래 무료로 제공하는 사이트를 이용하자.</p>
<ul>
<li><a href="https://pixabay.com/">https://pixabay.com/</a></li>
<li><a href="https://morguefile.com/">https://morguefile.com/</a></li>
<li><a href="http://gratisography.com/">http://gratisography.com/</a></li>
<li><a href="https://unsplash.com/">https://unsplash.com/</a></li>
<li><a href="http://littlevisuals.co/">http://littlevisuals.co/</a></li>
</ul>
</li>
</ul>
<h2 id="소소한-tip-그리고-고장났을-때">소소한 Tip 그리고 고장났을 때</h2>
<hr>
<p>이 부분은 본 포스트에 댓글로 질문이 달릴 경우 하나씩 추가해 나갈 예정이다. 더불어 언제나 통용되는 한가지 해결책을 남긴다.</p>
<ul>
<li>기능용도로 사용하는 특수문자(*,+,- 등)를 있는 그대로 표현하고 싶은경우 <code>\</code> 기호를 앞에 붙이면 된다.</li>
<li>마크다운에서 지원하지 않거나 표현하기 어려운 경우 <code>HTML 태그로 직접 표현</code>하는 것도 한가지 방법이다.
<pre><code>예를 들어 테마의 특성 때문에 줄바꿈이 잘 되지 않으면,
줄바꿈을 원하는 문장뒤에 &lt;BR/&gt; 태그를 원하는 라인 수만큼 넣으면 된다. 
</code></pre></li>
</ul>
<p>이것으로 Markdown의 사용법 강좌를 마치려한다. 꽤 오랜 시간을 내어 성의를 들여 작성했기에 자주 레퍼런스로 활용해 주시면 감사하겠다. 부족한 점은 댓글로 남겨주시면 보완하겠다.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating a New Theme</title>
            <link>https://yoseobmite.github.io/posts/2014/09/creating-a-new-theme/</link>
            <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2014/09/creating-a-new-theme/</guid>
            <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&rsquo;t cover using CSS to style your theme.</p>
<p>We&rsquo;ll start with creating a new site with a very basic template. Then we&rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.</p>
<p>In this tutorial, commands that you enter will start with the &ldquo;$&rdquo; prompt. The output will follow. Lines that start with &ldquo;#&rdquo; are comments that I&rsquo;ve added to explain a point. When I show updates to a file, the &ldquo;:wq&rdquo; on the last line means to save the file.</p>
<p>Here&rsquo;s an example:</p>
<pre><code>## this is a comment
$ echo this is a command
this is a command

## edit the file
$ vi foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
:wq

## show it
$ cat foo.md
+++
date = &quot;2014-09-28&quot;
title = &quot;creating a new theme&quot;
+++

bah and humbug
$
</code></pre><h2 id="some-definitions">Some Definitions</h2>
<p>There are a few concepts that you need to understand before creating a theme.</p>
<h3 id="skins">Skins</h3>
<p>Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.</p>
<p>You have two ways to create a skin. The simplest way is to create it in the <code>layouts/</code> directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the <code>layouts/</code> directory so it will always find the skin.</p>
<p>Your second choice is to create it in a sub-directory of the <code>themes/</code> directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?</p>
<p>The difference between creating a skin in <code>layouts/</code> and creating it in <code>themes/</code> is very subtle. A skin in <code>layouts/</code> can’t be customized without updating the templates and static files that it is built from. A skin created in <code>themes/</code>, on the other hand, can be and that makes it easier for other people to use it.</p>
<p>The rest of this tutorial will call a skin created in the <code>themes/</code> directory a theme.</p>
<p>Note that you can use this tutorial to create a skin in the <code>layouts/</code> directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.</p>
<h3 id="the-home-page">The Home Page</h3>
<p>The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.</p>
<h3 id="site-configuration-file">Site Configuration File</h3>
<p>When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.</p>
<p>Hugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your <code>content/</code> directory and template files in your <code>themes/</code> directory. It will create HTML files in your <code>public/</code> directory. You can change this by specifying alternate locations in the configuration file.</p>
<h3 id="content">Content</h3>
<p>Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.</p>
<h4 id="front-matter">Front Matter</h4>
<p>The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “<code>+++</code>”, YAML by “<code>---</code>”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.</p>
<p>The information in the front matter is passed into the template before the content is rendered into HTML.</p>
<h4 id="markdown">Markdown</h4>
<p>Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.</p>
<h3 id="template-files">Template Files</h3>
<p>Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it&rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.</p>
<p>There are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.</p>
<p>Hugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.</p>
<p>Please note that you can use the front matter to influence Hugo’s choice of templates.</p>
<h4 id="single-template">Single Template</h4>
<p>A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.</p>
<h4 id="list-template">List Template</h4>
<p>A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.</p>
<p>The homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.</p>
<h4 id="partial-template">Partial Template</h4>
<p>A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.</p>
<h2 id="create-a-new-site">Create a New Site</h2>
<p>Let&rsquo;s use Hugo to create a new web site. I&rsquo;m a Mac user, so I&rsquo;ll create mine in my home directory, in the Sites folder. If you&rsquo;re using Linux, you might have to create the folder first.</p>
<p>The &ldquo;new site&rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.</p>
<pre><code>$ hugo new site ~/Sites/zafta
$ cd ~/Sites/zafta
$ ls -l
total 8
drwxr-xr-x  7 quoha  staff  238 Sep 29 16:49 .
drwxr-xr-x  3 quoha  staff  102 Sep 29 16:49 ..
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>Take a look in the content/ directory to confirm that it is empty.</p>
<p>The other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That&rsquo;s a topic for a different tutorial, so please ignore them for now.</p>
<h3 id="generate-the-html-for-the-new-site">Generate the HTML For the New Site</h3>
<p>Running the <code>hugo</code> command with no options will read all the available content and generate the HTML files. It will also copy all static files (that&rsquo;s everything that&rsquo;s not content). Since we have an empty site, it won&rsquo;t do much, but it will do it very quickly.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>The &ldquo;<code>--verbose</code>&rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with &ldquo;INFO:&rdquo; or &ldquo;WARN:&rdquo; is present because we used that flag. The lines that start with &ldquo;WARN:&rdquo; are warning messages. We&rsquo;ll go over them later.</p>
<p>We can verify that the command worked by looking at the directory again.</p>
<pre><code>$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
$
</code></pre><p>See that new public/ directory? Hugo placed all generated content there. When you&rsquo;re ready to publish your web site, that&rsquo;s the place to start. For now, though, let&rsquo;s just confirm that we have what we&rsquo;d expect from a site with no content.</p>
<pre><code>$ ls -l public
total 16
-rw-r--r--  1 quoha  staff  416 Sep 29 17:02 index.xml
-rw-r--r--  1 quoha  staff  262 Sep 29 17:02 sitemap.xml
$
</code></pre><p>Hugo created two XML files, which is standard, but there are no HTML files.</p>
<h3 id="test-the-new-site">Test the New Site</h3>
<p>Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the &ldquo;server&rdquo; command. If it is successful, you will see output similar to the following:</p>
<pre><code>$ hugo server --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
</code></pre><p>Connect to the listed URL (it&rsquo;s on the line that starts with &ldquo;Web Server&rdquo;). If everything is working correctly, you should get a page that shows the following:</p>
<pre><code>index.xml
sitemap.xml
</code></pre><p>That&rsquo;s a listing of your public/ directory. Hugo didn&rsquo;t create a home page because our site has no content. When there&rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.</p>
<p>Let’s go back and look at those warnings again.</p>
<pre><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
WARN: 2014/09/29 Unable to locate layout: [404.html]
</code></pre><p>That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.</p>
<p>Now for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.</p>
<p>I like that the verbose flag causes Hugo to list the files that it&rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we&rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn&rsquo;t find a template for the home page and it told you so.</p>
<p>At this point, you&rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.</p>
<h2 id="create-a-new-theme">Create a New Theme</h2>
<p>Hugo doesn&rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.</p>
<p>We&rsquo;re going to create a new theme called &ldquo;zafta.&rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.</p>
<p>All themes have opinions on content and layout. For example, Zafta uses &ldquo;post&rdquo; over &ldquo;blog&rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.</p>
<h3 id="create-a-skeleton">Create a Skeleton</h3>
<p>Use the hugo &ldquo;new&rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.</p>
<pre><code>$ hugo new theme zafta

$ ls -l
total 8
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 archetypes
-rw-r--r--  1 quoha  staff   82 Sep 29 16:49 config.toml
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 content
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:02 public
drwxr-xr-x  2 quoha  staff   68 Sep 29 16:49 static
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes

$ find themes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff  1081 Sep 29 17:31 themes/zafta/LICENSE.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff     0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
-rw-r--r--  1 quoha  staff    93 Sep 29 17:31 themes/zafta/theme.toml
$
</code></pre><p>The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.</p>
<p>Please take a minute to fill out the theme.toml and LICENSE.md files. They&rsquo;re optional, but if you&rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It&rsquo;s also nice to declare the license so that people will know how they can use the theme.</p>
<pre><code>$ vi themes/zafta/theme.toml
author = &quot;michael d henderson&quot;
description = &quot;a minimal working template&quot;
license = &quot;MIT&quot;
name = &quot;zafta&quot;
source_repo = &quot;&quot;
tags = [&quot;tags&quot;, &quot;categories&quot;]
:wq

## also edit themes/zafta/LICENSE.md and change
## the bit that says &quot;YOUR_NAME_HERE&quot;
</code></pre><p>Note that the the skeleton&rsquo;s template files are empty. Don&rsquo;t worry, we&rsquo;ll be changing that shortly.</p>
<pre><code>$ find themes/zafta -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/single.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/partials/header.html
$
</code></pre><h3 id="update-the-configuration-file-to-use-the-theme">Update the Configuration File to Use the Theme</h3>
<p>Now that we&rsquo;ve got a theme to work with, it&rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add &ldquo;-t zafta&rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don&rsquo;t put it in the configuration file or specify it on the command line, you won&rsquo;t use the template that you&rsquo;re expecting to.</p>
<p>Edit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.</p>
<pre><code>$ vi config.toml
theme = &quot;zafta&quot;
baseurl = &quot;&quot;
languageCode = &quot;en-us&quot;
title = &quot;zafta - totally refreshing&quot;
MetaDataFormat = &quot;toml&quot;
:wq

$
</code></pre><h3 id="generate-the-site">Generate the Site</h3>
<p>Now that we have an empty theme, let&rsquo;s generate the site again.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
$
</code></pre><p>Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme&rsquo;s directory.</p>
<p>Let&rsquo;s check the public/ directory to see what Hugo&rsquo;s created.</p>
<pre><code>$ ls -l public
total 16
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 css
-rw-r--r--  1 quoha  staff    0 Sep 29 17:56 index.html
-rw-r--r--  1 quoha  staff  407 Sep 29 17:56 index.xml
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:56 js
-rw-r--r--  1 quoha  staff  243 Sep 29 17:56 sitemap.xml
$
</code></pre><p>Notice four things:</p>
<ol>
<li>Hugo created a home page. This is the file public/index.html.</li>
<li>Hugo created a css/ directory.</li>
<li>Hugo created a js/ directory.</li>
<li>Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn&rsquo;t create any pages. That&rsquo;s because it considers a &ldquo;page&rdquo; to be a file created directly from a content file. It doesn&rsquo;t count things like the index.html files that it creates automatically.</li>
</ol>
<h4 id="the-home-page-1">The Home Page</h4>
<p>Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo&rsquo;s warning message shows that it looks for three different templates:</p>
<pre><code>WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]
</code></pre><p>If it can&rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.</p>
<p>When Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.</p>
<pre><code>$ find . -name index.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 20:21 ./public/index.html
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 ./themes/zafta/layouts/index.html
$
</code></pre><h4 id="the-magic-of-static">The Magic of Static</h4>
<p>Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.</p>
<p>Hugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo&rsquo;s opinion is that you&rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don&rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo&rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.</p>
<pre><code>$ find themes/zafta -type d | xargs ls -ld
drwxr-xr-x  7 quoha  staff  238 Sep 29 17:38 themes/zafta
drwxr-xr-x  3 quoha  staff  102 Sep 29 17:31 themes/zafta/archetypes
drwxr-xr-x  5 quoha  staff  170 Sep 29 17:31 themes/zafta/layouts
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/_default
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/layouts/partials
drwxr-xr-x  4 quoha  staff  136 Sep 29 17:31 themes/zafta/static
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/css
drwxr-xr-x  2 quoha  staff   68 Sep 29 17:31 themes/zafta/static/js
$
</code></pre><h2 id="the-theme-development-cycle">The Theme Development Cycle</h2>
<p>When you&rsquo;re working on a theme, you will make changes in the theme&rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:</p>
<ol>
<li>Purge the public/ directory.</li>
<li>Run the built in web server in watch mode.</li>
<li>Open your site in a browser.</li>
<li>Update the theme.</li>
<li>Glance at your browser window to see changes.</li>
<li>Return to step 4.</li>
</ol>
<p>I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.</p>
<p>Check the main Hugo site for information on using Git with Hugo.</p>
<h3 id="purge-the-public-directory">Purge the public/ Directory</h3>
<p>When generating the site, Hugo will create new files and update existing ones in the <code>public/</code> directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.</p>
<p>Note: If you&rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.</p>
<h3 id="hugos-watch-option">Hugo&rsquo;s Watch Option</h3>
<p>Hugo&rsquo;s &ldquo;<code>--watch</code>&rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.</p>
<h3 id="live-reload">Live Reload</h3>
<p>Hugo&rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, &ldquo;Wow, that&rsquo;s totally amazing.&rdquo;</p>
<h3 id="development-commands">Development Commands</h3>
<p>Use the following commands as the basis for your workflow.</p>
<pre><code>## purge old files. hugo will recreate the public directory.
##
$ rm -rf public
##
## run hugo in watch mode
##
$ hugo server --watch --verbose
</code></pre><p>Here&rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I&rsquo;ve said this before, it&rsquo;s amazing.</p>
<pre><code>$ rm -rf public
$ hugo server --watch --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms
Watching for changes in /Users/quoha/Sites/zafta/content
Serving pages from /Users/quoha/Sites/zafta/public
Web Server is available at http://localhost:1313
Press Ctrl+C to stop
INFO: 2014/09/29 File System Event: [&quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html&quot;: MODIFY|ATTRIB]
Change detected, rebuilding site

WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 1 ms
</code></pre><h2 id="update-the-home-page-template">Update the Home Page Template</h2>
<p>The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme&rsquo;s layout/ directory:</p>
<ol>
<li>index.html</li>
<li>_default/list.html</li>
<li>_default/single.html</li>
</ol>
<p>We could update one of the default templates, but a good design decision is to update the most specific template available. That&rsquo;s not a hard and fast rule (in fact, we&rsquo;ll break it a few times in this tutorial), but it is a good generalization.</p>
<h3 id="make-a-static-home-page">Make a Static Home Page</h3>
<p>Right now, that page is empty because we don&rsquo;t have any content and we don&rsquo;t have any logic in the template. Let&rsquo;s change that by adding some text to the template.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre><code>$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
0 pages created
0 tags created
0 categories created
in 2 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 21:26 public/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;/html&gt;
</code></pre><h4 id="live-reload-1">Live Reload</h4>
<p>Note: If you&rsquo;re running the server with the <code>--watch</code> option, you&rsquo;ll see different content in the file:</p>
<pre><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;p&gt;hugo says hello!&lt;/p&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
    + ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>When you use <code>--watch</code>, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.</p>
<h3 id="build-a-dynamic-home-page">Build a &ldquo;Dynamic&rdquo; Home Page</h3>
<p>&ldquo;Dynamic home page?&rdquo; Hugo&rsquo;s a static web site generator, so this seems an odd thing to say. I mean let&rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We&rsquo;ll use iteration in the template to do that.</p>
<h4 id="create-new-posts">Create New Posts</h4>
<p>Now that we have the home page generating static content, let&rsquo;s add some content to the site. We&rsquo;ll display these posts as a list on the home page and on their own page, too.</p>
<p>Hugo has a command to generate a skeleton post, just like it does for sites and themes.</p>
<pre><code>$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md
ERROR: 2014/09/29 Unable to Cast &lt;nil&gt; to map[string]interface{}

$
</code></pre><p>That wasn&rsquo;t very nice, was it?</p>
<p>The &ldquo;new&rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there&rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.</p>
<pre><code>$ vi themes/zafta/archetypes/post.md
+++
Description = &quot;&quot;
Tags = []
Categories = []
+++
:wq

$ find themes/zafta/archetypes -type f | xargs ls -l
-rw-r--r--  1 quoha  staff   0 Sep 29 21:53 themes/zafta/archetypes/default.md
-rw-r--r--  1 quoha  staff  51 Sep 29 21:54 themes/zafta/archetypes/post.md

$ hugo --verbose new post/first.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/first.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md
/Users/quoha/Sites/zafta/content/post/first.md created

$ hugo --verbose new post/second.md
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 attempting to create  post/second.md of post
INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md
INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md
/Users/quoha/Sites/zafta/content/post/second.md created

$ ls -l content/post
total 16
-rw-r--r--  1 quoha  staff  104 Sep 29 21:54 first.md
-rw-r--r--  1 quoha  staff  105 Sep 29 21:57 second.md

$ cat content/post/first.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:54:53-05:00&quot;
title = &quot;first&quot;

+++
my first post

$ cat content/post/second.md
+++
Categories = []
Description = &quot;&quot;
Tags = []
date = &quot;2014-09-29T21:57:09-05:00&quot;
title = &quot;second&quot;

+++
my second post

$
</code></pre><p>Build the web site and then verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;category&quot;:&quot;categories&quot;, &quot;tag&quot;:&quot;tags&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$
</code></pre><p>The output says that it created 2 pages. Those are our new posts:</p>
<pre><code>$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  78 Sep 29 22:13 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:13 public/post/second/index.html
$
</code></pre><p>The new files are empty because because the templates used to generate the content are empty. The homepage doesn&rsquo;t show the new content, either. We have to update the templates to add the posts.</p>
<h3 id="list-and-single-templates">List and Single Templates</h3>
<p>In Hugo, we have three major kinds of templates. There&rsquo;s the home page template that we updated previously. It is used only by the home page. We also have &ldquo;single&rdquo; templates which are used to generate output for a single content file. We also have &ldquo;list&rdquo; templates that are used to group multiple pieces of content before generating output.</p>
<p>Generally speaking, list templates are named &ldquo;list.html&rdquo; and single templates are named &ldquo;single.html.&rdquo;</p>
<p>There are three other types of templates: partials, content views, and terms. We will not go into much detail on these.</p>
<h3 id="add-content-to-the-homepage">Add Content to the Homepage</h3>
<p>The home page will contain a list of posts. Let&rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between &ldquo;{{&rdquo; and &ldquo;}}&quot;. In our template, the commands are:</p>
<ol>
<li>range</li>
<li>.Title</li>
<li>end</li>
</ol>
<p>The &ldquo;range&rdquo; command is an iterator. We&rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.</p>
<p>The &ldquo;.Title&rdquo; command prints the value of the &ldquo;title&rdquo; variable. Hugo pulls it from the front matter in the Markdown file.</p>
<p>The &ldquo;end&rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds &ldquo;end.&rdquo; Everything between the &ldquo;range&rdquo; and &ldquo;end&rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.</p>
<p>It&rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.</p>
<p>Build the web site and then verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms
$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  94 Sep 29 22:23 public/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/first/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/index.html
-rw-r--r--  1 quoha  staff   0 Sep 29 22:23 public/post/second/index.html
$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;second&lt;/h1&gt;

    &lt;h1&gt;first&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let&rsquo;s take a moment to appreciate what we&rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you&rsquo;ve learned everything you need to know to build a theme. All that&rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.</p>
<p>And, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don&rsquo;t worry, though, that&rsquo;s all to come.</p>
<h3 id="add-content-to-the-posts">Add Content to the Posts</h3>
<p>We&rsquo;re working with posts, which are in the content/post/ directory. That means that their section is &ldquo;post&rdquo; (and if we don&rsquo;t do something weird, their type is also &ldquo;post&rdquo;).</p>
<p>Hugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can&rsquo;t find one, then it will look in the _default/ directory. There are some twists that we&rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.</p>
<p>Now that we know the search rule, let&rsquo;s see what we actually have available:</p>
<pre><code>$ find themes/zafta -name single.html | xargs ls -l
-rw-r--r--  1 quoha  staff  132 Sep 29 17:31 themes/zafta/layouts/_default/single.html
</code></pre><p>We could create a new template, post/single.html, or change the default. Since we don&rsquo;t know of any other content types, let&rsquo;s start with updating the default.</p>
<p>Remember, any content that we haven&rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we&rsquo;re going to be adding different types of content and we&rsquo;re going to end up undoing some of the changes we&rsquo;ve made. It&rsquo;s good because we&rsquo;ll be able to see immediate results. It&rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we&rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we&rsquo;ll accept the cost and proceed.</p>
<p>Please see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you&rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That&rsquo;s a refreshing amount of joy right there.</p>
<h4 id="update-the-template-file">Update the Template File</h4>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}
&lt;/body&gt;
&lt;/html&gt;
:wq

$
</code></pre><p>Build the web site and verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff   94 Sep 29 22:40 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:40 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:40 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:40 public/post/second/index.html

$ cat public/post/first/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;first&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;first&lt;/h1&gt;
  &lt;p&gt;my first post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;

$ cat public/post/second/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;second&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;second&lt;/h1&gt;
  &lt;p&gt;my second post&lt;/p&gt;

&lt;/body&gt;
&lt;/html&gt;
$
</code></pre><p>Notice that the posts now have content. You can go to localhost:1313/post/first to verify.</p>
<h3 id="linking-to-content">Linking to Content</h3>
<p>The posts are on the home page. Let&rsquo;s add a link from there to the post. Since this is the home page, we&rsquo;ll update its template.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  {{ range first 10 .Data.Pages }}
    &lt;h1&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h1&gt;
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Build the web site and verify the results.</p>
<pre><code>$ rm -rf public
$ hugo --verbose
INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/
INFO: 2014/09/29 found taxonomies: map[string]string{&quot;tag&quot;:&quot;tags&quot;, &quot;category&quot;:&quot;categories&quot;}
WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html]
0 draft content
0 future content
2 pages created
0 tags created
0 categories created
in 4 ms

$ find public -type f -name '*.html' | xargs ls -l
-rw-r--r--  1 quoha  staff  149 Sep 29 22:44 public/index.html
-rw-r--r--  1 quoha  staff  125 Sep 29 22:44 public/post/first/index.html
-rw-r--r--  1 quoha  staff    0 Sep 29 22:44 public/post/index.html
-rw-r--r--  1 quoha  staff  128 Sep 29 22:44 public/post/second/index.html

$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/second/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;

    &lt;h1&gt;&lt;a href=&quot;/post/first/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;

&lt;/body&gt;
&lt;/html&gt;

$
</code></pre><h3 id="create-a-post-listing">Create a Post Listing</h3>
<p>We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let&rsquo;s make it show a list of all posts (not just the first ten).</p>
<p>We need to decide which template to update. This will be a listing, so it should be a list template. Let&rsquo;s take a quick look and see which list templates are available.</p>
<pre><code>$ find themes/zafta -name list.html | xargs ls -l
-rw-r--r--  1 quoha  staff  0 Sep 29 17:31 themes/zafta/layouts/_default/list.html
</code></pre><p>As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don&rsquo;t have multiple content types, so let&rsquo;s stay consistent and update the default list template.</p>
<h2 id="creating-top-level-pages">Creating Top Level Pages</h2>
<p>Let&rsquo;s add an &ldquo;about&rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).</p>
<p>The default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let&rsquo;s verify that by creating an &ldquo;about&rdquo; page at the top level:</p>
<pre><code>$ vi content/about.md
+++
title = &quot;about&quot;
description = &quot;about this site&quot;
date = &quot;2014-09-27&quot;
slug = &quot;about time&quot;
+++

## about us

i'm speechless
:wq
</code></pre><p>Generate the web site and verify the results.</p>
<pre><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff   334 Sep 27 15:08 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff   527 Sep 27 15:08 public/index.html
-rw-rw-r--  1 mdhender  staff   358 Sep 27 15:08 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff     0 Sep 27 15:08 public/post/index.html
-rw-rw-r--  1 mdhender  staff   342 Sep 27 15:08 public/post/second-post/index.html
</code></pre><p>Notice that the page wasn&rsquo;t created at the top level. It was created in a sub-directory named &lsquo;about-time/'. That name came from our slug. Hugo will use the slug to name the generated content. It&rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.</p>
<p>One other thing. Take a look at the home page.</p>
<pre><code>$ cat public/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/theme/&quot;&gt;creating a new theme&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/about-time/&quot;&gt;about&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/second-post/&quot;&gt;second&lt;/a&gt;&lt;/h1&gt;
    &lt;h1&gt;&lt;a href=&quot;http://localhost:1313/post/first-post/&quot;&gt;first&lt;/a&gt;&lt;/h1&gt;
&lt;script&gt;document.write('&lt;script src=&quot;http://'
        + (location.host || 'localhost').split(':')[0]
		+ ':1313/livereload.js?mindelay=10&quot;&gt;&lt;/'
        + 'script&gt;')&lt;/script&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre><p>Notice that the &ldquo;about&rdquo; link is listed with the posts? That&rsquo;s not desirable, so let&rsquo;s change that first.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;body&gt;
  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if eq .Type &quot;page&quot; }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><p>Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.</p>
<p>But, that about page still renders to about-time/index.html.</p>
<pre><code>$ find public -name '*.html' | xargs ls -l
-rw-rw-r--  1 mdhender  staff    334 Sep 27 15:33 public/about-time/index.html
-rw-rw-r--  1 mdhender  staff    645 Sep 27 15:33 public/index.html
-rw-rw-r--  1 mdhender  staff    358 Sep 27 15:33 public/post/first-post/index.html
-rw-rw-r--  1 mdhender  staff      0 Sep 27 15:33 public/post/index.html
-rw-rw-r--  1 mdhender  staff    342 Sep 27 15:33 public/post/second-post/index.html
</code></pre><p>Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let&rsquo;s do it the hard way and change the permalink in the configuration file.</p>
<pre><code>$ vi config.toml
[permalinks]
	page = &quot;/:title/&quot;
	about = &quot;/:filename/&quot;
</code></pre><p>Generate the web site and verify that this didn&rsquo;t work. Hugo lets &ldquo;slug&rdquo; or &ldquo;URL&rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.</p>
<h2 id="sharing-templates">Sharing Templates</h2>
<p>If you&rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn&rsquo;t. That&rsquo;s because we didn&rsquo;t put the title in the home page&rsquo;s template (layouts/index.html). That&rsquo;s an easy thing to do, but let&rsquo;s look at a different option.</p>
<p>We can put the common bits into a shared template that&rsquo;s stored in the themes/zafta/layouts/partials/ directory.</p>
<h3 id="create-the-header-and-footer-partials">Create the Header and Footer Partials</h3>
<p>In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme&rsquo;s presentation.</p>
<pre><code>$ vi themes/zafta/layouts/partials/header.html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;{{ .Title }}&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
:wq

$ vi themes/zafta/layouts/partials/footer.html
&lt;/body&gt;
&lt;/html&gt;
:wq
</code></pre><h3 id="update-the-home-page-template-to-use-the-partials">Update the Home Page Template to Use the Partials</h3>
<p>The most noticeable difference between a template call and a partials call is the lack of path:</p>
<pre><code>{{ template &quot;theme/partials/header.html&quot; . }}
</code></pre><p>versus</p>
<pre><code>{{ partial &quot;header.html&quot; . }}
</code></pre><p>Both pass in the context.</p>
<p>Let&rsquo;s change the home page template to use these new partials.</p>
<pre><code>$ vi themes/zafta/layouts/index.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;posts&lt;/h1&gt;
  {{ range first 10 .Data.Pages }}
    {{ if eq .Type &quot;post&quot;}}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Title }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

  &lt;h1&gt;pages&lt;/h1&gt;
  {{ range .Data.Pages }}
    {{ if or (eq .Type &quot;page&quot;) (eq .Type &quot;about&quot;) }}
      &lt;h2&gt;&lt;a href=&quot;{{ .Permalink }}&quot;&gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}&lt;/a&gt;&lt;/h2&gt;
    {{ end }}
  {{ end }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the home page is now &ldquo;your title here&rdquo;, which comes from the &ldquo;title&rdquo; variable in the config.toml file.</p>
<h3 id="update-the-default-single-template-to-use-the-partials">Update the Default Single Template to Use the Partials</h3>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.</p>
<h2 id="add-date-published-to-posts">Add “Date Published” to Posts</h2>
<p>It&rsquo;s common to have posts display the date that they were written or published, so let&rsquo;s add that. The front matter of our posts has a variable named &ldquo;date.&rdquo; It&rsquo;s usually the date the content was created, but let&rsquo;s pretend that&rsquo;s the value we want to display.</p>
<h3 id="add-date-published-to-the-template">Add “Date Published” to the Template</h3>
<p>We&rsquo;ll start by updating the template used to render the posts. The template code will look like:</p>
<pre><code>{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}
</code></pre><p>Posts use the default single template, so we&rsquo;ll change that file.</p>
<pre><code>$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Generate the web site and verify the results. The posts now have the date displayed in them. There&rsquo;s a problem, though. The &ldquo;about&rdquo; page also has the date displayed.</p>
<p>As usual, there are a couple of ways to make the date display only on posts. We could do an &ldquo;if&rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.</p>
<p>The &ldquo;if&rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of &ldquo;code for today,&rdquo; too.</p>
<p>Let&rsquo;s assume, though, that we&rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we&rsquo;re going to create a section template.</p>
<p>Let&rsquo;s restore the default single template before we forget.</p>
<pre><code>$ mkdir themes/zafta/layouts/post
$ vi themes/zafta/layouts/_default/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq
</code></pre><p>Now we&rsquo;ll update the post&rsquo;s version of the single template. If you remember Hugo&rsquo;s rules, the template engine will use this version over the default.</p>
<pre><code>$ vi themes/zafta/layouts/post/single.html
{{ partial &quot;header.html&quot; . }}

  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;
  &lt;h2&gt;{{ .Date.Format &quot;Mon, Jan 2, 2006&quot; }}&lt;/h2&gt;
  {{ .Content }}

{{ partial &quot;footer.html&quot; . }}
:wq

</code></pre><p>Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn&rsquo;t.</p>
<h3 id="dont-repeat-yourself">Don&rsquo;t Repeat Yourself</h3>
<p>DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you&rsquo;re figuring that out, accept that you&rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it&rsquo;s okay to delay splitting up a template.</p>
]]></content>
        </item>
        
        <item>
            <title>Migrate to Hugo from Jekyll</title>
            <link>https://yoseobmite.github.io/posts/2014/03/migrate-to-hugo-from-jekyll/</link>
            <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2014/03/migrate-to-hugo-from-jekyll/</guid>
            <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
            <content type="html"><![CDATA[<h2 id="move-static-content-to-static">Move static content to <code>static</code></h2>
<p>Jekyll has a rule that any directory not starting with <code>_</code> will be copied as-is to the <code>_site</code> output. Hugo keeps all static content under <code>static</code>. You should therefore move it all there.
With Jekyll, something that looked like</p>
<pre><code>▾ &lt;root&gt;/
    ▾ images/
        logo.png
</code></pre>
<p>should become</p>
<pre><code>▾ &lt;root&gt;/
    ▾ static/
        ▾ images/
            logo.png
</code></pre>
<p>Additionally, you&rsquo;ll want any files that should reside at the root (such as <code>CNAME</code>) to be moved to <code>static</code>.</p>
<h2 id="create-your-hugo-configuration-file">Create your Hugo configuration file</h2>
<p>Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the <a href="/overview/configuration/">Hugo configuration documentation</a> for details.</p>
<h2 id="set-your-configuration-publish-folder-to-_site">Set your configuration publish folder to <code>_site</code></h2>
<p>The default is for Jekyll to publish to <code>_site</code> and for Hugo to publish to <code>public</code>. If, like me, you have <a href="http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html"><code>_site</code> mapped to a git submodule on the <code>gh-pages</code> branch</a>, you&rsquo;ll want to do one of two alternatives:</p>
<ol>
<li>
<p>Change your submodule to point to map <code>gh-pages</code> to public instead of <code>_site</code> (recommended).</p>
<pre><code> git submodule deinit _site
 git rm _site
 git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
</code></pre>
</li>
<li>
<p>Or, change the Hugo configuration to use <code>_site</code> instead of <code>public</code>.</p>
<pre><code> {
     ..
     &quot;publishdir&quot;: &quot;_site&quot;,
     ..
 }
</code></pre>
</li>
</ol>
<h2 id="convert-jekyll-templates-to-hugo-templates">Convert Jekyll templates to Hugo templates</h2>
<p>That&rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to <a href="http://jekyllrb.com/docs/templates/">Jekyll&rsquo;s template documentation</a> if you need to refresh your memory on how you built your blog and <a href="/layout/templates/">Hugo&rsquo;s template</a> to learn Hugo&rsquo;s way.</p>
<p>As a single reference data point, converting my templates for <a href="http://heyitsalex.net/">heyitsalex.net</a> took me no more than a few hours.</p>
<h2 id="convert-jekyll-plugins-to-hugo-shortcodes">Convert Jekyll plugins to Hugo shortcodes</h2>
<p>Jekyll has <a href="http://jekyllrb.com/docs/plugins/">plugins</a>; Hugo has <a href="/doc/shortcodes/">shortcodes</a>. It&rsquo;s fairly trivial to do a port.</p>
<h3 id="implementation">Implementation</h3>
<p>As an example, I was using a custom <a href="https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb"><code>image_tag</code></a> plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.</p>
<p>Jekyll&rsquo;s plugin:</p>
<pre><code>module Jekyll
  class ImageTag &lt; Liquid::Tag
    @url = nil
    @caption = nil
    @class = nil
    @link = nil
    // Patterns
    IMAGE_URL_WITH_CLASS_AND_CAPTION =
    IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;(\s+)-&gt;((https?:\/\/|\/)(\S+))(\s*)/i
    IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&quot;(.*?)&quot;/i
    IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
    IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
    def initialize(tag_name, markup, tokens)
      super
      if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
        @class   = $1
        @url     = $3
        @caption = $7
        @link = $9
      elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
        @class   = $1
        @url     = $3
        @caption = $7
      elsif markup =~ IMAGE_URL_WITH_CAPTION
        @url     = $1
        @caption = $5
      elsif markup =~ IMAGE_URL_WITH_CLASS
        @class = $1
        @url   = $3
      elsif markup =~ IMAGE_URL
        @url = $1
      end
    end
    def render(context)
      if @class
        source = &quot;&lt;figure class='#{@class}'&gt;&quot;
      else
        source = &quot;&lt;figure&gt;&quot;
      end
      if @link
        source += &quot;&lt;a href=\&quot;#{@link}\&quot;&gt;&quot;
      end
      source += &quot;&lt;img src=\&quot;#{@url}\&quot;&gt;&quot;
      if @link
        source += &quot;&lt;/a&gt;&quot;
      end
      source += &quot;&lt;figcaption&gt;#{@caption}&lt;/figcaption&gt;&quot; if @caption
      source += &quot;&lt;/figure&gt;&quot;
      source
    end
  end
end
Liquid::Template.register_tag('image', Jekyll::ImageTag)
</code></pre>
<p>is written as this Hugo shortcode:</p>
<pre><code>&lt;!-- image --&gt;
&lt;figure {{ with .Get &quot;class&quot; }}class=&quot;{{.}}&quot;{{ end }}&gt;
    {{ with .Get &quot;link&quot;}}&lt;a href=&quot;{{.}}&quot;&gt;{{ end }}
        &lt;img src=&quot;{{ .Get &quot;src&quot; }}&quot; {{ if or (.Get &quot;alt&quot;) (.Get &quot;caption&quot;) }}alt=&quot;{{ with .Get &quot;alt&quot;}}{{.}}{{else}}{{ .Get &quot;caption&quot; }}{{ end }}&quot;{{ end }} /&gt;
    {{ if .Get &quot;link&quot;}}&lt;/a&gt;{{ end }}
    {{ if or (or (.Get &quot;title&quot;) (.Get &quot;caption&quot;)) (.Get &quot;attr&quot;)}}
    &lt;figcaption&gt;{{ if isset .Params &quot;title&quot; }}
        {{ .Get &quot;title&quot; }}{{ end }}
        {{ if or (.Get &quot;caption&quot;) (.Get &quot;attr&quot;)}}&lt;p&gt;
        {{ .Get &quot;caption&quot; }}
        {{ with .Get &quot;attrlink&quot;}}&lt;a href=&quot;{{.}}&quot;&gt; {{ end }}
            {{ .Get &quot;attr&quot; }}
        {{ if .Get &quot;attrlink&quot;}}&lt;/a&gt; {{ end }}
        &lt;/p&gt; {{ end }}
    &lt;/figcaption&gt;
    {{ end }}
&lt;/figure&gt;
&lt;!-- image --&gt;
</code></pre>
<h3 id="usage">Usage</h3>
<p>I simply changed:</p>
<pre><code>{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &quot;having fun&quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; -&gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
</code></pre>
<p>to this (this example uses a slightly extended version named <code>fig</code>, different than the built-in <code>figure</code>):</p>
<pre><code>{{% fig class=&quot;full&quot; src=&quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&quot; title=&quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&quot; link=&quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&quot; %}}
</code></pre>
<p>As a bonus, the shortcode named parameters are, arguably, more readable.</p>
<h2 id="finishing-touches">Finishing touches</h2>
<h3 id="fix-content">Fix content</h3>
<p>Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that <code>hugo server --watch</code> is your friend. Test your changes and fix errors as needed.</p>
<h3 id="clean-up">Clean up</h3>
<p>You&rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&rsquo;t used, delete it.</p>
<h2 id="a-practical-example-in-a-diff">A practical example in a diff</h2>
<p><a href="http://heyitsalex.net/">Hey, it&rsquo;s Alex</a> was migrated in less than a <em>father-with-kids day</em> from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this <a href="https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610">diff</a>.</p>
]]></content>
        </item>
        
        <item>
            <title>(Hu)go Template Primer</title>
            <link>https://yoseobmite.github.io/posts/2014/04/hugo-template-primer/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2014/04/hugo-template-primer/</guid>
            <description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description>
            <content type="html"><![CDATA[<p>Hugo uses the excellent <a href="https://golang.org/">Go</a> <a href="https://golang.org/pkg/html/template/">html/template</a> library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in Go templates.</p>
<p>This document is a brief primer on using Go templates. The <a href="https://golang.org/pkg/html/template/">Go docs</a>
provide more details.</p>
<h2 id="introduction-to-go-templates">Introduction to Go Templates</h2>
<p>Go templates provide an extremely simple template language. It adheres to the
belief that only the most basic of logic belongs in the template or view layer.
One consequence of this simplicity is that Go templates parse very quickly.</p>
<p>A unique characteristic of Go templates is they are content aware. Variables and
content will be sanitized depending on the context of where they are used. More
details can be found in the <a href="https://golang.org/pkg/html/template/">Go docs</a>.</p>
<h2 id="basic-syntax">Basic Syntax</h2>
<p>Golang templates are HTML files with the addition of variables and
functions.</p>
<p><strong>Go variables and functions are accessible within {{ }}</strong></p>
<p>Accessing a predefined variable &ldquo;foo&rdquo;:</p>
<pre><code>{{ foo }}
</code></pre>
<p><strong>Parameters are separated using spaces</strong></p>
<p>Calling the add function with input of 1, 2:</p>
<pre><code>{{ add 1 2 }}
</code></pre>
<p><strong>Methods and fields are accessed via dot notation</strong></p>
<p>Accessing the Page Parameter &ldquo;bar&rdquo;</p>
<pre><code>{{ .Params.bar }}
</code></pre>
<p><strong>Parentheses can be used to group items together</strong></p>
<pre><code>{{ if or (isset .Params &quot;alt&quot;) (isset .Params &quot;caption&quot;) }} Caption {{ end }}
</code></pre>
<h2 id="variables">Variables</h2>
<p>Each Go template has a struct (object) made available to it. In hugo each
template is passed either a page or a node struct depending on which type of
page you are rendering. More details are available on the
<a href="/layout/variables">variables</a> page.</p>
<p>A variable is accessed by referencing the variable name.</p>
<pre><code>&lt;title&gt;{{ .Title }}&lt;/title&gt;
</code></pre>
<p>Variables can also be defined and referenced.</p>
<pre><code>{{ $address := &quot;123 Main St.&quot;}}
{{ $address }}
</code></pre>
<h2 id="functions">Functions</h2>
<p>Go template ship with a few functions which provide basic functionality. The Go
template system also provides a mechanism for applications to extend the
available functions with their own. <a href="/layout/functions">Hugo template
functions</a> provide some additional functionality we believe
are useful for building websites. Functions are called by using their name
followed by the required parameters separated by spaces. Template
functions cannot be added without recompiling hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ add 1 2 }}
</code></pre>
<h2 id="includes">Includes</h2>
<p>When including another template you will pass to it the data it will be
able to access. To pass along the current context please remember to
include a trailing dot. The templates location will always be starting at
the /layout/ directory within Hugo.</p>
<p><strong>Example:</strong></p>
<pre><code>{{ template &quot;chrome/header.html&quot; . }}
</code></pre>
<h2 id="logic">Logic</h2>
<p>Go templates provide the most basic iteration and conditional logic.</p>
<h3 id="iteration">Iteration</h3>
<p>Just like in Go, the Go templates make heavy use of range to iterate over
a map, array or slice. The following are different examples of how to use
range.</p>
<p><strong>Example 1: Using Context</strong></p>
<pre><code>{{ range array }}
    {{ . }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring value variable name</strong></p>
<pre><code>{{range $element := array}}
    {{ $element }}
{{ end }}
</code></pre>
<p><strong>Example 2: Declaring key and value variable name</strong></p>
<pre><code>{{range $index, $element := array}}
    {{ $index }}
    {{ $element }}
{{ end }}
</code></pre>
<h3 id="conditionals">Conditionals</h3>
<p>If, else, with, or, &amp; and provide the framework for handling conditional
logic in Go Templates. Like range, each statement is closed with <code>end</code>.</p>
<p>Go Templates treat the following values as false:</p>
<ul>
<li>false</li>
<li>0</li>
<li>any array, slice, map, or string of length zero</li>
</ul>
<p><strong>Example 1: If</strong></p>
<pre><code>{{ if isset .Params &quot;title&quot; }}&lt;h4&gt;{{ index .Params &quot;title&quot; }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 2: If -&gt; Else</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{else}}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<p><strong>Example 3: And &amp; Or</strong></p>
<pre><code>{{ if and (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
</code></pre>
<p><strong>Example 4: With</strong></p>
<p>An alternative way of writing &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent.</p>
<p>The first example above could be simplified as:</p>
<pre><code>{{ with .Params.title }}&lt;h4&gt;{{ . }}&lt;/h4&gt;{{ end }}
</code></pre>
<p><strong>Example 5: If -&gt; Else If</strong></p>
<pre><code>{{ if isset .Params &quot;alt&quot; }}
    {{ index .Params &quot;alt&quot; }}
{{ else if isset .Params &quot;caption&quot; }}
    {{ index .Params &quot;caption&quot; }}
{{ end }}
</code></pre>
<h2 id="pipes">Pipes</h2>
<p>One of the most powerful components of Go templates is the ability to
stack actions one after another. This is done by using pipes. Borrowed
from unix pipes, the concept is simple, each pipeline&rsquo;s output becomes the
input of the following pipe.</p>
<p>Because of the very simple syntax of Go templates, the pipe is essential
to being able to chain together function calls. One limitation of the
pipes is that they only can work with a single value and that value
becomes the last parameter of the next pipeline.</p>
<p>A few simple examples should help convey how to use the pipe.</p>
<p><strong>Example 1 :</strong></p>
<pre><code>{{ if eq 1 1 }} Same {{ end }}
</code></pre>
<p>is the same as</p>
<pre><code>{{ eq 1 1 | if }} Same {{ end }}
</code></pre>
<p>It does look odd to place the if at the end, but it does provide a good
illustration of how to use the pipes.</p>
<p><strong>Example 2 :</strong></p>
<pre><code>{{ index .Params &quot;disqus_url&quot; | html }}
</code></pre>
<p>Access the page parameter called &ldquo;disqus_url&rdquo; and escape the HTML.</p>
<p><strong>Example 3 :</strong></p>
<pre><code>{{ if or (or (isset .Params &quot;title&quot;) (isset .Params &quot;caption&quot;)) (isset .Params &quot;attr&quot;)}}
Stuff Here
{{ end }}
</code></pre>
<p>Could be rewritten as</p>
<pre><code>{{  isset .Params &quot;caption&quot; | or isset .Params &quot;title&quot; | or isset .Params &quot;attr&quot; | if }}
Stuff Here
{{ end }}
</code></pre>
<h2 id="context-aka-the-dot">Context (aka. the dot)</h2>
<p>The most easily overlooked concept to understand about Go templates is that {{ . }}
always refers to the current context. In the top level of your template this
will be the data set made available to it. Inside of a iteration it will have
the value of the current item. When inside of a loop the context has changed. .
will no longer refer to the data available to the entire page. If you need to
access this from within the loop you will likely want to set it to a variable
instead of depending on the context.</p>
<p><strong>Example:</strong></p>
<pre><code>  {{ $title := .Site.Title }}
  {{ range .Params.tags }}
    &lt;li&gt; &lt;a href=&quot;{{ $baseurl }}/tags/{{ . | urlize }}&quot;&gt;{{ . }}&lt;/a&gt; - {{ $title }} &lt;/li&gt;
  {{ end }}
</code></pre>
<p>Notice how once we have entered the loop the value of {{ . }} has changed. We
have defined a variable outside of the loop so we have access to it from within
the loop.</p>
<h1 id="hugo-parameters">Hugo Parameters</h1>
<p>Hugo provides the option of passing values to the template language
through the site configuration (for sitewide values), or through the meta
data of each specific piece of content. You can define any values of any
type (supported by your front matter/config format) and use them however
you want to inside of your templates.</p>
<h2 id="using-content-page-parameters">Using Content (page) Parameters</h2>
<p>In each piece of content you can provide variables to be used by the
templates. This happens in the <a href="/content/front-matter">front matter</a>.</p>
<p>An example of this is used in this documentation site. Most of the pages
benefit from having the table of contents provided. Sometimes the TOC just
doesn&rsquo;t make a lot of sense. We&rsquo;ve defined a variable in our front matter
of some pages to turn off the TOC from being displayed.</p>
<p>Here is the example front matter:</p>
<pre><code>---
title: &quot;Permalinks&quot;
date: &quot;2013-11-18&quot;
aliases:
  - &quot;/doc/permalinks/&quot;
groups: [&quot;extras&quot;]
groups_weight: 30
notoc: true
---
</code></pre><p>Here is the corresponding code inside of the template:</p>
<pre><code>  {{ if not .Params.notoc }}
    &lt;div id=&quot;toc&quot; class=&quot;well col-md-4 col-sm-6&quot;&gt;
    {{ .TableOfContents }}
    &lt;/div&gt;
  {{ end }}
</code></pre>
<h2 id="using-site-config-parameters">Using Site (config) Parameters</h2>
<p>In your top-level configuration file (eg, <code>config.yaml</code>) you can define site
parameters, which are values which will be available to you in chrome.</p>
<p>For instance, you might declare:</p>
<div class="highlight"><pre style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#719e07">params</span>:
  <span style="color:#719e07">CopyrightHTML</span>: <span style="color:#2aa198">&#34;Copyright &amp;#xA9; 2013 John Doe. All Rights Reserved.&#34;</span>
  <span style="color:#719e07">TwitterUser</span>: <span style="color:#2aa198">&#34;spf13&#34;</span>
  <span style="color:#719e07">SidebarRecentLimit</span>: <span style="color:#2aa198">5</span>
</code></pre></div><p>Within a footer layout, you might then declare a <code>&lt;footer&gt;</code> which is only
provided if the <code>CopyrightHTML</code> parameter is provided, and if it is given,
you would declare it to be HTML-safe, so that the HTML entity is not escaped
again.  This would let you easily update just your top-level config file each
January 1st, instead of hunting through your templates.</p>
<pre><code>{{if .Site.Params.CopyrightHTML}}&lt;footer&gt;
&lt;div class=&quot;text-center&quot;&gt;{{.Site.Params.CopyrightHTML | safeHtml}}&lt;/div&gt;
&lt;/footer&gt;{{end}}
</code></pre><p>An alternative way of writing the &ldquo;if&rdquo; and then referencing the same value
is to use &ldquo;with&rdquo; instead. With rebinds the context <code>.</code> within its scope,
and skips the block if the variable is absent:</p>
<pre><code>{{with .Site.Params.TwitterUser}}&lt;span class=&quot;twitter&quot;&gt;
&lt;a href=&quot;https://twitter.com/{{.}}&quot; rel=&quot;author&quot;&gt;
&lt;img src=&quot;/images/twitter.png&quot; width=&quot;48&quot; height=&quot;48&quot; title=&quot;Twitter: {{.}}&quot;
 alt=&quot;Twitter&quot;&gt;&lt;/a&gt;
&lt;/span&gt;{{end}}
</code></pre><p>Finally, if you want to pull &ldquo;magic constants&rdquo; out of your layouts, you can do
so, such as in this example:</p>
<pre><code>&lt;nav class=&quot;recent&quot;&gt;
  &lt;h1&gt;Recent Posts&lt;/h1&gt;
  &lt;ul&gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}}
    &lt;li&gt;&lt;a href=&quot;{{.RelPermalink}}&quot;&gt;{{.Title}}&lt;/a&gt;&lt;/li&gt;
  {{end}}&lt;/ul&gt;
&lt;/nav&gt;
</code></pre>]]></content>
        </item>
        
        <item>
            <title>Getting Started with Hugo</title>
            <link>https://yoseobmite.github.io/posts/2014/04/getting-started-with-hugo/</link>
            <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
            
            <guid>https://yoseobmite.github.io/posts/2014/04/getting-started-with-hugo/</guid>
            <description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
            <content type="html"><![CDATA[<h2 id="step-1-install-hugo">Step 1. Install Hugo</h2>
<p>Go to <a href="https://github.com/spf13/hugo/releases">Hugo releases</a> and download the
appropriate version for your OS and architecture.</p>
<p>Save it somewhere specific as we will be using it in the next step.</p>
<p>More complete instructions are available at <a href="https://gohugo.io/getting-started/installing/">Install Hugo</a></p>
<h2 id="step-2-build-the-docs">Step 2. Build the Docs</h2>
<p>Hugo has its own example site which happens to also be the documentation site
you are reading right now.</p>
<p>Follow the following steps:</p>
<ol>
<li>Clone the <a href="http://github.com/spf13/hugo">Hugo repository</a></li>
<li>Go into the repo</li>
<li>Run hugo in server mode and build the docs</li>
<li>Open your browser to http://localhost:1313</li>
</ol>
<p>Corresponding pseudo commands:</p>
<pre><code>git clone https://github.com/spf13/hugo
cd hugo
/path/to/where/you/installed/hugo server --source=./docs
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Press ctrl+c to stop
</code></pre>
<p>Once you&rsquo;ve gotten here, follow along the rest of this page on your local build.</p>
<h2 id="step-3-change-the-docs-site">Step 3. Change the docs site</h2>
<p>Stop the Hugo process by hitting Ctrl+C.</p>
<p>Now we are going to run hugo again, but this time with hugo in watch mode.</p>
<pre><code>/path/to/hugo/from/step/1/hugo server --source=./docs --watch
&gt; 29 pages created
&gt; 0 tags index created
&gt; in 27 ms
&gt; Web Server is available at http://localhost:1313
&gt; Watching for changes in /Users/spf13/Code/hugo/docs/content
&gt; Press ctrl+c to stop
</code></pre>
<p>Open your <a href="http://vim.spf13.com">favorite editor</a> and change one of the source
content pages. How about changing this very file to <em>fix the typo</em>. How about changing this very file to <em>fix the typo</em>.</p>
<p>Content files are found in <code>docs/content/</code>. Unless otherwise specified, files
are located at the same relative location as the url, in our case
<code>docs/content/overview/quickstart.md</code>.</p>
<p>Change and save this file.. Notice what happened in your terminal.</p>
<pre><code>&gt; Change detected, rebuilding site

&gt; 29 pages created
&gt; 0 tags index created
&gt; in 26 ms
</code></pre>
<p>Refresh the browser and observe that the typo is now fixed.</p>
<p>Notice how quick that was. Try to refresh the site before it&rsquo;s finished building. I double dare you.
Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.</p>
<h2 id="step-4-have-fun">Step 4. Have fun</h2>
<p>The best way to learn something is to play with it.</p>
]]></content>
        </item>
        
    </channel>
</rss>
